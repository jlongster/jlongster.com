{"count":919,"tx0":536870912,"max-eid":131,"max-tx":536870913,"schema":"{\":block/string\" {}, \":block/md\" {}, \":post/featured-img\" {}, \":block/post\" {:db/valueType :db.type/ref, :db/cardinality :db.cardinality/one}, \":block/type\" {}, \":post/url\" {}, \":post/tags\" {:db/cardinality :db.cardinality/many}, \":post/uid\" {}, \":block/order\" {}, \":block/meta\" {}, \":post/public\" {}, \":block/uuid\" {}, \":post/date\" {}, \":post/title\" {}}","attrs":[":block/md",":block/meta",":block/order",":block/post",":block/string",":block/type",":block/uuid",":post/date",":post/featured-image",":post/public",":post/subtitle",":post/tags",":post/title",":post/uid",":post/url"],"keywords":[],"eavt":[[1,7,[1,"#inst \"2024-01-08T00:00:00.000-00:00\""],1],[1,8,"https://static.jlongster.com/20240102/localhost_3000_color-space-experiments.png",1],[1,9,true,1],[1,10,"",1],[1,11,"color",1],[1,11,"sketchbook",1],[1,12,"Why does the chromaticity diagram look like that?",1],[1,13,"why-chromaticity-shape",1],[1,14,"https://jlongster.com/why-chromaticity-shape",1],[2,0,"```css run\nsvg {\n  font-size: 15px;\n  padding-bottom: 10px;\n  margin-bottom: 10px;\n  overflow: visible;\n}\n\nsvg g[aria-label=\"x-axis label\"] {\n  transform: translateY(35px);\n}\n```\n",1],[2,1,[1,"{\"lang\" \"css\", \"run\" true}"],1],[2,2,0,1],[2,3,1,1],[2,4,"svg {\n  font-size: 15px;\n  padding-bottom: 10px;\n  margin-bottom: 10px;\n  overflow: visible;\n}\n\nsvg g[aria-label=\"x-axis label\"] {\n  transform: translateY(35px);\n}",1],[2,5,"code",1],[2,6,"4fcc3688-e7df-41ba-b4e5-e5b46db96780",1],[3,0,"I've always wanted to understand color theory, so I started reading about the XYZ color space which looked like it was the mother of all color spaces. I had no idea what that meant, but it was created in 1931 so studying 93-year old research seemed like a good place to start.\n",1],[3,1,[1,"{}"],1],[3,2,1,1],[3,3,1,1],[3,4,"I've always wanted to understand color theory, so I started reading about the XYZ color space which looked like it was the mother of all color spaces. I had no idea what that meant, but it was created in 1931 so studying 93-year old research seemed like a good place to start.",1],[3,5,"paragraph",1],[3,6,"3dfb387f-8009-4ab9-8973-ece427658808",1],[4,0,"When reading about the XYZ color space, this cursed image keeps popping up:\n",1],[4,1,[1,"{}"],1],[4,2,2,1],[4,3,1,1],[4,4,"When reading about the XYZ color space, this cursed image keeps popping up:",1],[4,5,"paragraph",1],[4,6,"b5a21185-439b-4e3a-b0cc-022c5ea744b2",1],[5,0,"<figure>\n  <img src=\"https://static.jlongster.com/20240103/CIE1931xy_blank.svg\" />\n  <figcaption>\n    By BenRG - Own work based on: CIExy1931.svg, Public Domain, https://commons.wikimedia.org/w/index.php?curid=7889658\n </figcaption>\n</figure>\n",1],[5,1,[1,"{}"],1],[5,2,3,1],[5,3,1,1],[5,4,"<figure>\n  <img src=\"https://static.jlongster.com/20240103/CIE1931xy_blank.svg\" />\n  <figcaption>\n    By BenRG - Own work based on: CIExy1931.svg, Public Domain, https://commons.wikimedia.org/w/index.php?curid=7889658\n </figcaption>\n</figure>",1],[5,5,"html",1],[5,6,"c592b6ed-dad5-4c5c-9a19-275a42c470a4",1],[6,0,"I say \"cursed\" because I have no idea what that means. **What the heck is that shape??**\n",1],[6,1,[1,"{}"],1],[6,2,4,1],[6,3,1,1],[6,4,"I say \"cursed\" because I have no idea what that means. What the heck is that shape??",1],[6,5,"paragraph",1],[6,6,"59a3156c-9b15-4345-bbef-d952880c891d",1],[7,0,"I couldn't find any reasonably clear answer to my question. It's obviously not a formula like `x = func(y)`. Why is it that shape, and where did the colors come from? Obviously the edges are wavelengths which have a specific color, but how did the image above compute every pixel?\n",1],[7,1,[1,"{}"],1],[7,2,5,1],[7,3,1,1],[7,4,"I couldn't find any reasonably clear answer to my question. It's obviously not a formula like x = func(y). Why is it that shape, and where did the colors come from? Obviously the edges are wavelengths which have a specific color, but how did the image above compute every pixel?",1],[7,5,"paragraph",1],[7,6,"a7d9d1fb-5525-4990-a1c9-8d8fda6dad89",1],[8,0,"I became obsessed with this question. Below is the path I took to try to answer it.\n",1],[8,1,[1,"{}"],1],[8,2,6,1],[8,3,1,1],[8,4,"I became obsessed with this question. Below is the path I took to try to answer it.",1],[8,5,"paragraph",1],[8,6,"7ad42406-2566-416e-90cd-353f293a5bc8",1],[9,0,"I'll spoil the answer but it might not make sense until you read this article: the shape comes from how our eyes perceive red, green, and blue relative to each other. Skip to the [last section](#more-shape-explorations) if you want to see some direct examples.\n",1],[9,1,[1,"{}"],1],[9,2,7,1],[9,3,1,1],[9,4,"I'll spoil the answer but it might not make sense until you read this article: the shape comes from how our eyes perceive red, green, and blue relative to each other. Skip to the last section if you want to see some direct examples.",1],[9,5,"paragraph",1],[9,6,"ca7f59eb-4865-49bd-8857-e7a1c3f36e9f",1],[10,0,"The fill colors inside the shape are another story, but a simple explanation is there is some math to calculate the mixture of colors and we can draw the above by sampling millions of points in the space and rendering them onto the 2d image.\n",1],[10,1,[1,"{}"],1],[10,2,8,1],[10,3,1,1],[10,4,"The fill colors inside the shape are another story, but a simple explanation is there is some math to calculate the mixture of colors and we can draw the above by sampling millions of points in the space and rendering them onto the 2d image.",1],[10,5,"paragraph",1],[10,6,"291d3a03-5825-4244-b267-1ba179d26a64",1],[11,0,"Let's dig in more.\n",1],[11,1,[1,"{}"],1],[11,2,9,1],[11,3,1,1],[11,4,"Let's dig in more.",1],[11,5,"paragraph",1],[11,6,"df711182-de66-44c2-ab3b-60e7bdfd5c0a",1],[12,0,"```js run\nimport * as Plot from \"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm\";\nimport * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7/+esm\";\n\nwindow.Plot = Plot;\nwindow.d3 = d3;\n\nwindow.xyzTable = d3.csv(\"https://static.jlongster.com/20230616/xyz.csv\", d3.autoType);\nwindow.rgbTable = d3.csv(\"https://static.jlongster.com/20230616/data.csv\", d3.autoType);\n```\n",1],[12,1,[1,"{\"lang\" \"js\", \"run\" true}"],1],[12,2,10,1],[12,3,1,1],[12,4,"import * as Plot from \"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm\";\nimport * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7/+esm\";\n\nwindow.Plot = Plot;\nwindow.d3 = d3;\n\nwindow.xyzTable = d3.csv(\"https://static.jlongster.com/20230616/xyz.csv\", d3.autoType);\nwindow.rgbTable = d3.csv(\"https://static.jlongster.com/20230616/data.csv\", d3.autoType);",1],[12,5,"code",1],[12,6,"26b0751e-c621-4b90-b30a-8ec4e71e0fc6",1],[13,0,"```js run\nwindow.sRGB_gamma = (r, g, b) => {\n    r = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n  \n  return [r, g, b];\n}\n\n// This is one we don't use much; it seems to assume an XYZ that has\n// some sort of scaled factor which we don't use\n/*window.XYZ_to_RGB_scaled = (X, Y, Z) => {\n  let [r, g, b] = sRGB_gamma(\n    X *  3.2406 + Y * -1.5371385 + Z * -0.4985314,\n    X * -0.9689 + Y *  1.8758 + Z *  0.0415,\n    X *  0.0557 + Y * -0.2040 + Z *  1.0570\n  )\n  return [r * 255 | 0, g * 255 | 0, b * 255 | 0];\n}*/\n\nwindow.XYZ_to_RGB = (x, y, z) => {\n  const r = x * 2.36461385 +  y * -0.89654057 + z * -0.46807328;\n  const g = x * -0.51516621 + y * 1.4264081   + z * 0.0887581;\n  const b = x * 0.0052037   + y * -0.01440816 + z * 1.00920446;\n  return [r * 255 | 0, g  * 255 | 0, b * 255 | 0];\n}\n\nwindow.XYZ_to_sRGB = (X, Y, Z) => {\n  let [r, g, b] = sRGB_gamma(\n    X *  3.2406 + Y * -1.5371385 + Z * -0.4985314,\n    X * -0.9689 + Y *  1.8758 + Z *  0.0415,\n    X *  0.0557 + Y * -0.2040 + Z *  1.0570\n  )\n\n  return [r * 255 | 0, g * 255 | 0, b * 255 | 0];\n}\n\nwindow.XYZ_to_WideGamutRGB = (x, y, z) => {\n  return sRGB_gamma(\n    x * 1.4628067 +  y * -0.1840623 + z * -0.2743606,\n    x * -0.5217933 + y * 1.4472381   + z * 0.0677227,\n    x * 0.0349342   + y * -0.0968930 + z * 1.2884099\n  )\n}\n\n/*window.isValidRGB = (r, g, b) => {\n  return r > 0 && r < 255 && g > 0 && g < 255 && b > 0 && b < 255;\n}*/\n\n/*\nwindow.makeValidRGB = (r, g, b) => {\n  return [\n    r < 0 ? 0 : r > 255 ? 255 : r,\n    g < 0 ? 0 : g > 255 ? 255 : g,\n    b < 0 ? 0 : b > 255 ? 255 : b\n  ]\n}*/\n```\n",1],[13,1,[1,"{\"lang\" \"js\", \"run\" true}"],1],[13,2,11,1],[13,3,1,1],[13,4,"window.sRGB_gamma = (r, g, b) => {\n    r = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n  \n  return [r, g, b];\n}\n\n// This is one we don't use much; it seems to assume an XYZ that has\n// some sort of scaled factor which we don't use\n/*window.XYZ_to_RGB_scaled = (X, Y, Z) => {\n  let [r, g, b] = sRGB_gamma(\n    X *  3.2406 + Y * -1.5371385 + Z * -0.4985314,\n    X * -0.9689 + Y *  1.8758 + Z *  0.0415,\n    X *  0.0557 + Y * -0.2040 + Z *  1.0570\n  )\n  return [r * 255 | 0, g * 255 | 0, b * 255 | 0];\n}*/\n\nwindow.XYZ_to_RGB = (x, y, z) => {\n  const r = x * 2.36461385 +  y * -0.89654057 + z * -0.46807328;\n  const g = x * -0.51516621 + y * 1.4264081   + z * 0.0887581;\n  const b = x * 0.0052037   + y * -0.01440816 + z * 1.00920446;\n  return [r * 255 | 0, g  * 255 | 0, b * 255 | 0];\n}\n\nwindow.XYZ_to_sRGB = (X, Y, Z) => {\n  let [r, g, b] = sRGB_gamma(\n    X *  3.2406 + Y * -1.5371385 + Z * -0.4985314,\n    X * -0.9689 + Y *  1.8758 + Z *  0.0415,\n    X *  0.0557 + Y * -0.2040 + Z *  1.0570\n  )\n\n  return [r * 255 | 0, g * 255 | 0, b * 255 | 0];\n}\n\nwindow.XYZ_to_WideGamutRGB = (x, y, z) => {\n  return sRGB_gamma(\n    x * 1.4628067 +  y * -0.1840623 + z * -0.2743606,\n    x * -0.5217933 + y * 1.4472381   + z * 0.0677227,\n    x * 0.0349342   + y * -0.0968930 + z * 1.2884099\n  )\n}\n\n/*window.isValidRGB = (r, g, b) => {\n  return r > 0 && r < 255 && g > 0 && g < 255 && b > 0 && b < 255;\n}*/\n\n/*\nwindow.makeValidRGB = (r, g, b) => {\n  return [\n    r < 0 ? 0 : r > 255 ? 255 : r,\n    g < 0 ? 0 : g > 255 ? 255 : g,\n    b < 0 ? 0 : b > 255 ? 255 : b\n  ]\n}*/",1],[13,5,"code",1],[13,6,"0cd28693-e1d9-46e0-bd9e-822eb97cb682",1],[14,0,"## Color matching functions\n",1],[14,1,[1,"{}"],1],[14,2,12,1],[14,3,1,1],[14,4,"Color matching functions",1],[14,5,"heading",1],[14,6,"0be7d9bc-0cbf-4817-ab64-327ad7a0007f",1],[15,0,"The first place to start is color matching functions. These functions determine the strength of specific wavelengths (color) to contribute so that our eyes perceive a target wavelength (color). We have 3 color matching functions for red, green, and blue (at wavelengths 700, 546, and 435 respectively), and  these functions specify how to mix RGB to so that we visually see a [spectral color](https://en.wikipedia.org/wiki/Spectral_color).\n",1],[15,1,[1,"{}"],1],[15,2,13,1],[15,3,1,1],[15,4,"The first place to start is color matching functions. These functions determine the strength of specific wavelengths (color) to contribute so that our eyes perceive a target wavelength (color). We have 3 color matching functions for red, green, and blue (at wavelengths 700, 546, and 435 respectively), and  these functions specify how to mix RGB to so that we visually see a spectral color.",1],[15,5,"paragraph",1],[15,6,"a6b1d0fb-6b48-4a56-ba02-9692390e333b",1],[16,0,"More simply put: imagine that you have red, green, and blue light sources. What is the intensity of each one so that the resulting light matches a specific color on the spectrum?\n",1],[16,1,[1,"{}"],1],[16,2,14,1],[16,3,1,1],[16,4,"More simply put: imagine that you have red, green, and blue light sources. What is the intensity of each one so that the resulting light matches a specific color on the spectrum?",1],[16,5,"paragraph",1],[16,6,"b6ab6595-0d82-4a4f-a782-6801ecfa6cc3",1],[17,0,"Note that these are *spectral* colors: monochromatic light with a single wavelength. Think of colors on the rainbow. Many colors are not spectral, and are a mix of many spectral colors.\n",1],[17,1,[1,"{}"],1],[17,2,15,1],[17,3,1,1],[17,4,"Note that these are spectral colors: monochromatic light with a single wavelength. Think of colors on the rainbow. Many colors are not spectral, and are a mix of many spectral colors.",1],[17,5,"paragraph",1],[17,6,"7897eac8-ca5b-46f8-8381-fc7803c0965c",1],[18,0,"The CIE 1931 color space defines these RGB color matching functions. The red, green, and blue lines represent the intensity of each RGB light source:\n",1],[18,1,[1,"{}"],1],[18,2,16,1],[18,3,1,1],[18,4,"The CIE 1931 color space defines these RGB color matching functions. The red, green, and blue lines represent the intensity of each RGB light source:",1],[18,5,"paragraph",1],[18,6,"3df4dc63-1289-4049-90d7-82241cdd6a30",1],[19,0,"```js run height=410\nfunction run(data) {\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"r\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"g\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"b\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nrender(window.rgbTable.then(run))\n```\n",1],[19,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410}"],1],[19,2,17,1],[19,3,1,1],[19,4,"function run(data) {\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"r\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"g\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"b\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nrender(window.rgbTable.then(run))",1],[19,5,"code",1],[19,6,"87950b88-fc96-4188-8dbc-2f3ec2fc48b7",1],[20,0,"*Note: this plot uses the table from the original study. This raw data must not be used anymore because I couldn't find it anywhere. I had to extract it myself from an appendix in the [original report](https://ia802802.us.archive.org/23/items/gov.law.cie.15.2004/cie.15.2004.pdf).*\n",1],[20,1,[1,"{}"],1],[20,2,18,1],[20,3,1,1],[20,4,"Note: this plot uses the table from the original study. This raw data must not be used anymore because I couldn't find it anywhere. I had to extract it myself from an appendix in the original report.",1],[20,5,"paragraph",1],[20,6,"5c6c102a-40c6-47a1-9f4d-27b4d999884c",1],[21,0,"Given a wavelength on the X axis, you can see how to \"mix\" the RGB wavelengths to produce the target color.\n",1],[21,1,[1,"{}"],1],[21,2,19,1],[21,3,1,1],[21,4,"Given a wavelength on the X axis, you can see how to \"mix\" the RGB wavelengths to produce the target color.",1],[21,5,"paragraph",1],[21,6,"041361a5-f115-40d3-8327-c3c52263fd1b",1],[22,0,"How did they come up with these? They scientifically studied how our eyes mix RGB colors by sitting people down in a room with multiple light sources. One light source was the target color, and the other side had red, green, and blue light sources. People had to adjust the strength of the RGB sources until it matched the target color. They literally had people manually adjust lights and recorded the values! There's a [great article](https://medium.com/hipster-color-science/a-beginners-guide-to-colorimetry-401f1830b65a) that explains the experiments in more detail.\n",1],[22,1,[1,"{}"],1],[22,2,20,1],[22,3,1,1],[22,4,"How did they come up with these? They scientifically studied how our eyes mix RGB colors by sitting people down in a room with multiple light sources. One light source was the target color, and the other side had red, green, and blue light sources. People had to adjust the strength of the RGB sources until it matched the target color. They literally had people manually adjust lights and recorded the values! There's a great article that explains the experiments in more detail.",1],[22,5,"paragraph",1],[22,6,"642bc536-98cc-4aa2-aabf-4aea188557f3",1],[23,0,"There's a **big problem** with the above functions. Can you see it? What do you think a *negative* red light source means?\n",1],[23,1,[1,"{}"],1],[23,2,21,1],[23,3,1,1],[23,4,"There's a big problem with the above functions. Can you see it? What do you think a negative red light source means?",1],[23,5,"paragraph",1],[23,6,"1eff7624-b296-494e-983b-71ba6afabaa8",1],[24,0,"It's nonsense! That means with this model, given pure RGB lights, there are certain spectral colors that are impossible to recreate. However, this data is still incredibly useful and we can transform it into something meaningful.\n",1],[24,1,[1,"{}"],1],[24,2,22,1],[24,3,1,1],[24,4,"It's nonsense! That means with this model, given pure RGB lights, there are certain spectral colors that are impossible to recreate. However, this data is still incredibly useful and we can transform it into something meaningful.",1],[24,5,"paragraph",1],[24,6,"0ff19437-fff2-4535-bdec-1f2ded96f7b1",1],[25,0,"Introducing the XYZ color matching functions. The XYZ color space is simply the RGB color space, but multiplied with a matrix to transform it a bit. The important part is this is a linear transform: it's literally the same thing, just reshaped a little.\n",1],[25,1,[1,"{}"],1],[25,2,23,1],[25,3,1,1],[25,4,"Introducing the XYZ color matching functions. The XYZ color space is simply the RGB color space, but multiplied with a matrix to transform it a bit. The important part is this is a linear transform: it's literally the same thing, just reshaped a little.",1],[25,5,"paragraph",1],[25,6,"48124724-9fd7-4cff-9903-873191c16c83",1],[26,0,"I found a raw table for the XYZ color matching functions [here](https://files.cie.co.at/CIE_xyz_1931_2deg.csv) and this is what it looks like. The CIE 1931 XYZ color matching functions:\n",1],[26,1,[1,"{}"],1],[26,2,24,1],[26,3,1,1],[26,4,"I found a raw table for the XYZ color matching functions here and this is what it looks like. The CIE 1931 XYZ color matching functions:",1],[26,5,"paragraph",1],[26,6,"e25b1faa-e316-48a5-af3b-8d2d61e88d57",1],[27,0,"```js run height=410 title=\"XYZ color matching functions\"\nfunction run(data) {\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nrender(window.xyzTable.then(run))\n```\n",1],[27,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410, \"title\" \"XYZ color matching functions\"}"],1],[27,2,25,1],[27,3,1,1],[27,4,"function run(data) {\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nrender(window.xyzTable.then(run))",1],[27,5,"code",1],[27,6,"401bc86a-3f6d-469a-b3f5-a81d019f2e88",1],[28,0,"[Wikipedia](https://en.wikipedia.org/wiki/CIE_1931_color_space#Construction_of_the_CIE_XYZ_color_space_from_the_Wright–Guild_data) defines the RGB matrix transform as this:\n",1],[28,1,[1,"{}"],1],[28,2,26,1],[28,3,1,1],[28,4,"Wikipedia defines the RGB matrix transform as this:",1],[28,5,"paragraph",1],[28,6,"43cf8898-d74c-4032-b98e-1247bff14d0a",1],[29,0,"```js\nmatrix = [\n  2.364613,  -0.89654, -0.468073,\n -0.515166,  1.426408, 0.088758,\n  0.005203, -0.014408, 1.009204\n]\n\n[R, G, B] = matrix * [X, Y, Z]\n  \n```\n",1],[29,1,[1,"{\"lang\" \"js\"}"],1],[29,2,27,1],[29,3,1,1],[29,4,"matrix = [\n  2.364613,  -0.89654, -0.468073,\n -0.515166,  1.426408, 0.088758,\n  0.005203, -0.014408, 1.009204\n]\n\n[R, G, B] = matrix * [X, Y, Z]\n  ",1],[29,5,"code",1],[29,6,"192e2a1f-94a8-4229-a9d9-2504f628ea3c",1],[30,0,"We can take the XYZ table and transform it with the above matrix, and doing so produces this graph. Look familiar? This is exactly what the RGB graph above looks like (plotted directly from the data table)!\n",1],[30,1,[1,"{}"],1],[30,2,28,1],[30,3,1,1],[30,4,"We can take the XYZ table and transform it with the above matrix, and doing so produces this graph. Look familiar? This is exactly what the RGB graph above looks like (plotted directly from the data table)!",1],[30,5,"paragraph",1],[30,6,"91b05d4a-5083-4863-a8ee-80f4467a2efe",1],[31,0,"```js run height=410 title=\"XYZ transformed to RGB\"\nfunction run(data) {\n  data = data.map(d => {\n    const {x, y, z, wavelength} = d;\n    return {\n      wavelength,\n      r: (x *  2.364613 + y * -0.89654 + z * -0.468073),\n      g: (x * -0.515166 + y *  1.426408 + z *  0.088758),\n      b: (x *  0.005203 + y * -0.014408 + z *  1.009204)\n    }\n  })\n  \n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"r\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"g\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"b\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nrender(window.xyzTable.then(run))\n```\n",1],[31,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410, \"title\" \"XYZ transformed to RGB\"}"],1],[31,2,29,1],[31,3,1,1],[31,4,"function run(data) {\n  data = data.map(d => {\n    const {x, y, z, wavelength} = d;\n    return {\n      wavelength,\n      r: (x *  2.364613 + y * -0.89654 + z * -0.468073),\n      g: (x * -0.515166 + y *  1.426408 + z *  0.088758),\n      b: (x *  0.005203 + y * -0.014408 + z *  1.009204)\n    }\n  })\n  \n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"r\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"g\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"b\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nrender(window.xyzTable.then(run))",1],[31,5,"code",1],[31,6,"ea30eab5-963e-40f8-8246-cd2b1ee80b49",1],[32,0,"Wikipedia also documents an [analytical approximation](https://en.wikipedia.org/wiki/CIE_1931_color_space#Analytical_approximation) of this data, which means we can use mathematical functions to generate the data instead of using tables. Press \"view source\" to see the algorithm:\n",1],[32,1,[1,"{}"],1],[32,2,30,1],[32,3,1,1],[32,4,"Wikipedia also documents an analytical approximation of this data, which means we can use mathematical functions to generate the data instead of using tables. Press \"view source\" to see the algorithm:",1],[32,5,"paragraph",1],[32,6,"b13bbc8b-bfe4-47f1-8539-7cd6f5e53e6f",1],[33,0,"```js run height=410 title=\"Analytical approximation\"\nfunction g(x, u, o1, o2) {\n  if(x < u) {\n    return Math.exp(-.5 * Math.pow(x - u, 2) / Math.pow(o1, 2))\n  }\n  \n   return Math.exp(-.5 * Math.pow(x - u, 2) / Math.pow(o2, 2))\n}\n\nfunction x(wv) {\n  return 1.056 * g(wv, 599.8, 37.9, 31.0) + \n    0.362 * g(wv, 442.0, 16.0, 26.7) +\n    -0.065 * g(wv, 501.1, 20.4, 26.2);\n}\n\nfunction y(wv) {\n  return 0.821 * g(wv, 568.8, 46.9, 40.5) +\n    0.286 * g(wv, 530.9, 16.3, 31.1)\n}\n\nfunction z(wv) {\n  return 1.217 * g(wv, 437.0, 11.8, 36.0) +\n    0.681 * g(wv, 459.0, 26.0, 13.8);\n}\n\nconst data = Array.from(new Array(780 - 380), (_, idx) => {\n  return {\n    wavelength: idx + 380,\n    x: x(idx + 380),\n    y: y(idx + 380),\n    z: z(idx + 380)\n  }\n})\n\nrender(\n  Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n)\n```\n",1],[33,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410, \"title\" \"Analytical approximation\"}"],1],[33,2,31,1],[33,3,1,1],[33,4,"function g(x, u, o1, o2) {\n  if(x < u) {\n    return Math.exp(-.5 * Math.pow(x - u, 2) / Math.pow(o1, 2))\n  }\n  \n   return Math.exp(-.5 * Math.pow(x - u, 2) / Math.pow(o2, 2))\n}\n\nfunction x(wv) {\n  return 1.056 * g(wv, 599.8, 37.9, 31.0) + \n    0.362 * g(wv, 442.0, 16.0, 26.7) +\n    -0.065 * g(wv, 501.1, 20.4, 26.2);\n}\n\nfunction y(wv) {\n  return 0.821 * g(wv, 568.8, 46.9, 40.5) +\n    0.286 * g(wv, 530.9, 16.3, 31.1)\n}\n\nfunction z(wv) {\n  return 1.217 * g(wv, 437.0, 11.8, 36.0) +\n    0.681 * g(wv, 459.0, 26.0, 13.8);\n}\n\nconst data = Array.from(new Array(780 - 380), (_, idx) => {\n  return {\n    wavelength: idx + 380,\n    x: x(idx + 380),\n    y: y(idx + 380),\n    z: z(idx + 380)\n  }\n})\n\nrender(\n  Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n)",1],[33,5,"code",1],[33,6,"a729e821-802e-4e83-9ccd-bf11d67eb6e5",1],[34,0,"### How is this useful?\n",1],[34,1,[1,"{}"],1],[34,2,32,1],[34,3,1,1],[34,4,"How is this useful?",1],[34,5,"heading",1],[34,6,"2a9f4d85-e2f6-4225-8a72-d859124611e1",1],[35,0,"Ok, so we have these color matching functions. When displaying these colors with RGB lights though, we can't even show all of the spectral colors. Transforming it into XYZ space, where everything is positive, fixes the numbers but what's the point if we still can't physically show them?\n",1],[35,1,[1,"{}"],1],[35,2,33,1],[35,3,1,1],[35,4,"Ok, so we have these color matching functions. When displaying these colors with RGB lights though, we can't even show all of the spectral colors. Transforming it into XYZ space, where everything is positive, fixes the numbers but what's the point if we still can't physically show them?",1],[35,5,"paragraph",1],[35,6,"47e431ce-bdff-4d5d-ba43-665ae1d16394",1],[36,0,"The XYZ space *describes* all colors, even colors that are impossible to display. It's become a standard space to encode colors in a device-independent way, and it's up to a specific device to interpret them into a space that it can physically produce. This is nice because we have a standard way to encode color information without restricting the possibilities of the future -- as devices become better at displaying more and more colors, they can automatically start displaying them without requiring any infrastructure changes.\n",1],[36,1,[1,"{}"],1],[36,2,34,1],[36,3,1,1],[36,4,"The XYZ space describes all colors, even colors that are impossible to display. It's become a standard space to encode colors in a device-independent way, and it's up to a specific device to interpret them into a space that it can physically produce. This is nice because we have a standard way to encode color information without restricting the possibilities of the future -- as devices become better at displaying more and more colors, they can automatically start displaying them without requiring any infrastructure changes.",1],[36,5,"paragraph",1],[36,6,"6288b4d1-21ff-4ff5-accb-d6e5dd2f74d1",1],[37,0,"## Chromaticity\n",1],[37,1,[1,"{}"],1],[37,2,35,1],[37,3,1,1],[37,4,"Chromaticity",1],[37,5,"heading",1],[37,6,"d3719e25-f57a-4d49-a342-66672adb2401",1],[38,0,"Now let's get back to that cursed shape. That's actually a [chromaticity](https://en.wikipedia.org/wiki/Chromaticity) diagram, which is \"objective specification of the quality of a color regardless of its luminance\".\n",1],[38,1,[1,"{}"],1],[38,2,36,1],[38,3,1,1],[38,4,"Now let's get back to that cursed shape. That's actually a chromaticity diagram, which is \"objective specification of the quality of a color regardless of its luminance\".",1],[38,5,"paragraph",1],[38,6,"f1b29434-1757-4a8c-9aa2-9361202150c5",1],[39,0,"We can derive the chromaticity for a color by taking the XYZ values for it dividing each by the total:\n",1],[39,1,[1,"{}"],1],[39,2,37,1],[39,3,1,1],[39,4,"We can derive the chromaticity for a color by taking the XYZ values for it dividing each by the total:",1],[39,5,"paragraph",1],[39,6,"92223fd8-03a1-4c61-8793-fa6900d47705",1],[40,0,"```js\nconst x = X / (X + Y + Z)\nconst y = Y / (X + Y + Z)\nconst z = Z / (X + Y + Z) = 1 - x - y\n```\n",1],[40,1,[1,"{\"lang\" \"js\"}"],1],[40,2,38,1],[40,3,1,1],[40,4,"const x = X / (X + Y + Z)\nconst y = Y / (X + Y + Z)\nconst z = Z / (X + Y + Z) = 1 - x - y",1],[40,5,"code",1],[40,6,"1a8ef4a8-9bb8-475f-ad5a-d73c84ea72e9",1],[41,0,"We don't actually need `z` because we can derive it given `x` and `y`. Hence we have the \"xy chromaticity diagram\". Remember how I said it's a 3d curve projected onto a 2d space? We've done that by just dropping `z`.\n",1],[41,1,[1,"{}"],1],[41,2,39,1],[41,3,1,1],[41,4,"We don't actually need z because we can derive it given x and y. Hence we have the \"xy chromaticity diagram\". Remember how I said it's a 3d curve projected onto a 2d space? We've done that by just dropping z.",1],[41,5,"paragraph",1],[41,6,"74dc161e-bc56-4964-b0df-93e5428b2354",1],[42,0,"If we want to go back to XYZ from `xy`, we need the `Y` value. This is called the `xyY` color space and is another way to encode colors.\n",1],[42,1,[1,"{}"],1],[42,2,40,1],[42,3,1,1],[42,4,"If we want to go back to XYZ from xy, we need the Y value. This is called the xyY color space and is another way to encode colors.",1],[42,5,"paragraph",1],[42,6,"3cd10a2c-6180-47d9-a2c3-0cc053ab35ab",1],[43,0,"Alright, let's try this out. Let's take the RGB table we rendered above, and plot the chromaticity. We do this by using the above functions, and plotting the `x` and `y` points (the colors are a basic estimation):\n",1],[43,1,[1,"{}"],1],[43,2,41,1],[43,3,1,1],[43,4,"Alright, let's try this out. Let's take the RGB table we rendered above, and plot the chromaticity. We do this by using the above functions, and plotting the x and y points (the colors are a basic estimation):",1],[43,5,"paragraph",1],[43,6,"ed1978f6-10a2-48d0-a180-8ee07a5f807b",1],[44,0,"```js run height=410 title=\"RGB chromaticity\"\nfunction run(data) {  \n  let chrom = data.map(d => {\n    let r = d.r;\n    let g = d.g;\n    let b = d.b;\n\n    let total = r + g + b;\n    return {\n      wavelength: d.wavelength,\n      r: r / total,\n      g: g / total,\n      b: b / total\n    }\n  })\n  \n  return Plot.plot({\n    marks: [\n      Plot.link(chrom, {\n        x1: (d, i) => i === 0 ? d.r : chrom[i - 1].r,\n        x2: 'r',\n        y1: (d, i) => i === 0 ? d.g : chrom[i - 1].g,\n        y2: 'g',\n        stroke: d => `rgb(${d.r * 255 | 0}, ${d.g * 255 | 0}, ${d.b * 255 | 0})`,\n        markerEnd: \"arrow\"\n      }),\n      Plot.ruleY([0]),\n      Plot.tip(chrom, Plot.pointer({\n        x: \"r\",\n        y: \"g\", \n        channels: {\n          x: \"r\",\n          y: \"g\",\n          wavelength: \"wavelength\"\n        },\n      })),\n    ],\n  })\n}\n\nrender(window.rgbTable.then(run))\n```\n",1],[44,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410, \"title\" \"RGB chromaticity\"}"],1],[44,2,42,1],[44,3,1,1],[44,4,"function run(data) {  \n  let chrom = data.map(d => {\n    let r = d.r;\n    let g = d.g;\n    let b = d.b;\n\n    let total = r + g + b;\n    return {\n      wavelength: d.wavelength,\n      r: r / total,\n      g: g / total,\n      b: b / total\n    }\n  })\n  \n  return Plot.plot({\n    marks: [\n      Plot.link(chrom, {\n        x1: (d, i) => i === 0 ? d.r : chrom[i - 1].r,\n        x2: 'r',\n        y1: (d, i) => i === 0 ? d.g : chrom[i - 1].g,\n        y2: 'g',\n        stroke: d => `rgb(${d.r * 255 | 0}, ${d.g * 255 | 0}, ${d.b * 255 | 0})`,\n        markerEnd: \"arrow\"\n      }),\n      Plot.ruleY([0]),\n      Plot.tip(chrom, Plot.pointer({\n        x: \"r\",\n        y: \"g\", \n        channels: {\n          x: \"r\",\n          y: \"g\",\n          wavelength: \"wavelength\"\n        },\n      })),\n    ],\n  })\n}\n\nrender(window.rgbTable.then(run))",1],[44,5,"code",1],[44,6,"4db674ee-ba7a-49f5-83ee-e8da4f84876c",1],[45,0,"Hey! Look at that! That looks familiar. Why is it so *slanted* though? If you look at the x axis, it actually goes into negative! That's because the RGB data is representing impossible colors.\n",1],[45,1,[1,"{}"],1],[45,2,43,1],[45,3,1,1],[45,4,"Hey! Look at that! That looks familiar. Why is it so slanted though? If you look at the x axis, it actually goes into negative! That's because the RGB data is representing impossible colors.",1],[45,5,"paragraph",1],[45,6,"132c17b2-4e21-4176-81d7-b415fab52a42",1],[46,0,"Let's use an RGB to XYZ matrix to transform it into XYZ space (the opposite of what we did before, where we transformed XYZ into RGB) space. If we render the same data but transformed, it looks like this:\n",1],[46,1,[1,"{}"],1],[46,2,44,1],[46,3,1,1],[46,4,"Let's use an RGB to XYZ matrix to transform it into XYZ space (the opposite of what we did before, where we transformed XYZ into RGB) space. If we render the same data but transformed, it looks like this:",1],[46,5,"paragraph",1],[46,6,"4e847042-c5ce-4059-8f5c-558dac460eca",1],[47,0,"```js run height=410 title=\"RGB chromaticity transformed with XYZ matrix\"\nfunction RGB_to_XYZ(r, g, b) {\n  return [\n    r * 2.768 + g * 1.751 + b * 1.130,\n    r * 1 +     g * 4.590 + b * 0.060,\n    r * 0 +     g * 0.056 + b * 5.594\n  ];\n}\n\nfunction run(data) {  \n  let chrom = data.map(d => {\n    let [x, y, z] = RGB_to_XYZ(d.r, d.g, d.b);\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total,\n      r: d.r / (d.r + d.g + d.b),\n      g: d.g / (d.r + d.g + d.b),\n      b: d.b / (d.r + d.g + d.b)\n    }\n  })\n  \n  return Plot.plot({\n    marks: [\n      Plot.link(chrom, {\n        x1: (d, i) => i === 0 ? d.x : chrom[i - 1].x,\n        x2: 'x',\n        y1: (d, i) => i === 0 ? d.y : chrom[i - 1].y,\n        y2: 'y',\n        stroke: d => `rgb(${d.r * 255 | 0}, ${d.g * 255 | 0}, ${d.b * 255 | 0})`,\n        markerEnd: \"arrow\"\n      }),\n      Plot.ruleY([0]),\n      Plot.tip(chrom, Plot.pointer({\n        x: \"x\",\n        y: \"y\", \n        channels: {\n          x: \"x\",\n          y: \"y\",\n          wavelength: \"wavelength\"\n        },\n      })),\n    ]\n  })\n}\n\nrender(window.rgbTable.then(run))\n```\n",1],[47,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410, \"title\" \"RGB chromaticity transformed with XYZ matrix\"}"],1],[47,2,45,1],[47,3,1,1],[47,4,"function RGB_to_XYZ(r, g, b) {\n  return [\n    r * 2.768 + g * 1.751 + b * 1.130,\n    r * 1 +     g * 4.590 + b * 0.060,\n    r * 0 +     g * 0.056 + b * 5.594\n  ];\n}\n\nfunction run(data) {  \n  let chrom = data.map(d => {\n    let [x, y, z] = RGB_to_XYZ(d.r, d.g, d.b);\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total,\n      r: d.r / (d.r + d.g + d.b),\n      g: d.g / (d.r + d.g + d.b),\n      b: d.b / (d.r + d.g + d.b)\n    }\n  })\n  \n  return Plot.plot({\n    marks: [\n      Plot.link(chrom, {\n        x1: (d, i) => i === 0 ? d.x : chrom[i - 1].x,\n        x2: 'x',\n        y1: (d, i) => i === 0 ? d.y : chrom[i - 1].y,\n        y2: 'y',\n        stroke: d => `rgb(${d.r * 255 | 0}, ${d.g * 255 | 0}, ${d.b * 255 | 0})`,\n        markerEnd: \"arrow\"\n      }),\n      Plot.ruleY([0]),\n      Plot.tip(chrom, Plot.pointer({\n        x: \"x\",\n        y: \"y\", \n        channels: {\n          x: \"x\",\n          y: \"y\",\n          wavelength: \"wavelength\"\n        },\n      })),\n    ]\n  })\n}\n\nrender(window.rgbTable.then(run))",1],[47,5,"code",1],[47,6,"1b2ef335-c0c5-4450-9c31-ae3b3a9798ae",1],[48,0,"Now that's looking *really* familiar!\n",1],[48,1,[1,"{}"],1],[48,2,46,1],[48,3,1,1],[48,4,"Now that's looking really familiar!",1],[48,5,"paragraph",1],[48,6,"77819ed9-f3a2-4add-9903-4d42c9388d5f",1],[49,0,"Just to double-check, let's render the chromaticity of the XYZ table data. Note that we have more granular data here, so there are more points, but it matches:\n",1],[49,1,[1,"{}"],1],[49,2,47,1],[49,3,1,1],[49,4,"Just to double-check, let's render the chromaticity of the XYZ table data. Note that we have more granular data here, so there are more points, but it matches:",1],[49,5,"paragraph",1],[49,6,"af4a3479-daef-4fff-935c-567a14d0b725",1],[50,0,"```js run height=410\nfunction run(data) {\n  let chromaticity = data.map(d => {\n    let x = d.x;\n    let y = d.y;\n    let z = d.z;\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total\n    }\n  })\n\n  return Plot.plot({\n    marks: [\n      Plot.link(chromaticity, {\n        x1: (d, i) => i === 0 ? d.x : chromaticity[i - 1].x,\n        x2: 'x',\n        y1: (d, i) => i === 0 ? d.y : chromaticity[i - 1].y,\n        y2: 'y',\n        stroke: d => `rgb(${d.x * 255 | 0}, ${d.y * 255 | 0}, ${d.z * 255 | 0})`,\n        markerEnd: \"arrow\"\n      }),\n      Plot.ruleY([0]),\n      Plot.tip(chromaticity, Plot.pointer({\n        x: \"x\",\n        y: \"y\", \n        channels: {\n          x: \"x\",\n          y: \"y\",\n          wavelength: \"wavelength\"\n        },\n      })),\n    ]\n  })\n}\n\nrender(window.xyzTable.then(run))\n```\n",1],[50,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410}"],1],[50,2,48,1],[50,3,1,1],[50,4,"function run(data) {\n  let chromaticity = data.map(d => {\n    let x = d.x;\n    let y = d.y;\n    let z = d.z;\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total\n    }\n  })\n\n  return Plot.plot({\n    marks: [\n      Plot.link(chromaticity, {\n        x1: (d, i) => i === 0 ? d.x : chromaticity[i - 1].x,\n        x2: 'x',\n        y1: (d, i) => i === 0 ? d.y : chromaticity[i - 1].y,\n        y2: 'y',\n        stroke: d => `rgb(${d.x * 255 | 0}, ${d.y * 255 | 0}, ${d.z * 255 | 0})`,\n        markerEnd: \"arrow\"\n      }),\n      Plot.ruleY([0]),\n      Plot.tip(chromaticity, Plot.pointer({\n        x: \"x\",\n        y: \"y\", \n        channels: {\n          x: \"x\",\n          y: \"y\",\n          wavelength: \"wavelength\"\n        },\n      })),\n    ]\n  })\n}\n\nrender(window.xyzTable.then(run))",1],[50,5,"code",1],[50,6,"905c2722-9b32-4a7a-ba44-ef1ee41952d0",1],[51,0,"Ok, so what about colors? How do we fill the middle part with all the colors? Note: this is where I really start to get out my league, but here's my best attempt.\n",1],[51,1,[1,"{}"],1],[51,2,49,1],[51,3,1,1],[51,4,"Ok, so what about colors? How do we fill the middle part with all the colors? Note: this is where I really start to get out my league, but here's my best attempt.",1],[51,5,"paragraph",1],[51,6,"2d29c5dc-7ff3-408f-8970-05e6ecca63ce",1],[52,0,"What if we iterate over every single pixel in the canvas and try to plot a color for it? The question is given x and y, how do we get a color?\n",1],[52,1,[1,"{}"],1],[52,2,50,1],[52,3,1,1],[52,4,"What if we iterate over every single pixel in the canvas and try to plot a color for it? The question is given x and y, how do we get a color?",1],[52,5,"paragraph",1],[52,6,"f77087a2-afaa-4e96-9a79-8bda722dde7f",1],[53,0,"Here are some steps:\n",1],[53,1,[1,"{}"],1],[53,2,51,1],[53,3,1,1],[53,4,"Here are some steps:",1],[53,5,"paragraph",1],[53,6,"24323902-7ee4-44f1-8e0b-20b7cdf844dd",1],[54,0,"We scale each x and y point in the canvas to a value between 0 and 1\n",1],[54,1,[1,"{}"],1],[54,2,52,1],[54,3,1,1],[54,4,"We scale each x and y point in the canvas to a value between 0 and 1",1],[54,5,"paragraph",1],[54,6,"ce237517-8fd7-4434-9738-0cb5a55d1ca3",1],[55,0,"Remember above I said we need the `Y` value to transform back into XYZ space? Turns out that the XYZ space intentionally made `Y` map to the luminance value of a color, so that means we can... make it up?\n",1],[55,1,[1,"{}"],1],[55,2,53,1],[55,3,1,1],[55,4,"Remember above I said we need the Y value to transform back into XYZ space? Turns out that the XYZ space intentionally made Y map to the luminance value of a color, so that means we can... make it up?",1],[55,5,"paragraph",1],[55,6,"2bb1fd9b-55a1-4a0c-825d-fa310fc16fc5",1],[56,0,"What if we just try to use a luminance value of 1?\n",1],[56,1,[1,"{}"],1],[56,2,54,1],[56,3,1,1],[56,4,"What if we just try to use a luminance value of 1?",1],[56,5,"paragraph",1],[56,6,"d589cf2c-f32d-4726-bf87-4f4b31f7a74f",1],[57,0,"That lets us generate XYZ values, which we then translate into sRGB space (don't worry about the `s` there, it's just RGB space with some gamma correction)\n",1],[57,1,[1,"{}"],1],[57,2,55,1],[57,3,1,1],[57,4,"That lets us generate XYZ values, which we then translate into sRGB space (don't worry about the s there, it's just RGB space with some gamma correction)",1],[57,5,"paragraph",1],[57,6,"d1677bae-e5f3-443d-8769-ec45db5e571b",1],[58,0,"One immediate problem you hit this produces many invalid colors. We also want to experiment with different values of `Y`. The demo below has controls to customize its behavior: change `Y` from 0 to 1, and hide colors with elements below 0 or 255.\n",1],[58,1,[1,"{}"],1],[58,2,56,1],[58,3,1,1],[58,4,"One immediate problem you hit this produces many invalid colors. We also want to experiment with different values of Y. The demo below has controls to customize its behavior: change Y from 0 to 1, and hide colors with elements below 0 or 255.",1],[58,5,"paragraph",1],[58,6,"26486165-d610-4c7e-9bb4-881c23bd617b",1],[59,0,"```js run height=500 title=\"chromaticity colors\"\nconst canvas = document.createElement('canvas');\ncanvas.width = 500;\ncanvas.height = 500;\ncanvas.style.border = '1px solid #f0f0f0'\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\n// This is some UI state filled in later\nwindow.chromaState = null;\n\nwindow.renderChroma = (spectralPoints) => {\n  const {Y, clipLow, clipHigh} = window.chromaState;\n  \n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, 500, 500)\n\n  for(let i=0; i<500; i++) {\n    for(let j=0; j<500; j++) {\n      const x = i / 500;\n      const y = 1 - j / 500;\n\n      const X = (Y / y) * x;\n      const Z = (Y / y) * (1 - x - y);\n\n      let [r, g, b] = XYZ_to_sRGB(X, Y, Z);\n\n      if((!clipLow || (r >= 0 && g >= 0 && b >= 0)) &&\n         (!clipHigh || (r <= 255 && g <= 255 && b <= 255))) {\n        ctx.fillStyle = `rgb(${r} ${g} ${b})`\n        ctx.fillRect(i, j, 1, 1)\n      }\n    }\n  }\n  \n  // show the outline in black\n  spectralPoints.forEach(c => {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(c.x * 500, (1 - c.y) * 500, 4, 4)\n  });\n  \n  // midpoint\n  ctx.fillStyle = 'black';\n  ctx.fillRect((1/3 * 500 | 0) - 1, ((1 - 1/3) * 500 | 0) - 1, 3, 3);\n}\n\nrender(canvas)\n```\n",1],[59,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 500, \"title\" \"chromaticity colors\"}"],1],[59,2,57,1],[59,3,1,1],[59,4,"const canvas = document.createElement('canvas');\ncanvas.width = 500;\ncanvas.height = 500;\ncanvas.style.border = '1px solid #f0f0f0'\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\n// This is some UI state filled in later\nwindow.chromaState = null;\n\nwindow.renderChroma = (spectralPoints) => {\n  const {Y, clipLow, clipHigh} = window.chromaState;\n  \n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, 500, 500)\n\n  for(let i=0; i<500; i++) {\n    for(let j=0; j<500; j++) {\n      const x = i / 500;\n      const y = 1 - j / 500;\n\n      const X = (Y / y) * x;\n      const Z = (Y / y) * (1 - x - y);\n\n      let [r, g, b] = XYZ_to_sRGB(X, Y, Z);\n\n      if((!clipLow || (r >= 0 && g >= 0 && b >= 0)) &&\n         (!clipHigh || (r <= 255 && g <= 255 && b <= 255))) {\n        ctx.fillStyle = `rgb(${r} ${g} ${b})`\n        ctx.fillRect(i, j, 1, 1)\n      }\n    }\n  }\n  \n  // show the outline in black\n  spectralPoints.forEach(c => {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(c.x * 500, (1 - c.y) * 500, 4, 4)\n  });\n  \n  // midpoint\n  ctx.fillStyle = 'black';\n  ctx.fillRect((1/3 * 500 | 0) - 1, ((1 - 1/3) * 500 | 0) - 1, 3, 3);\n}\n\nrender(canvas)",1],[59,5,"code",1],[59,6,"e4c0e6cf-1f4c-4e86-b22b-d2b56eaab825",1],[60,0,"```js run title=\"UI wiring up\"\nconst slider = document.querySelector('#y-slider');\nconst sliderValue = document.querySelector('#y-slider-value');\nconst clipLow = document.querySelector('#clip-low');\nconst clipHigh = document.querySelector('#clip-high');\n\nlet spectralPoints = [];\n\nfunction syncStateAndRender() {\n  window.chromaState = {\n    Y: parseFloat(slider.value),\n    clipLow: clipLow.checked,\n    clipHigh: clipHigh.checked\n  }\n  \n  window.renderChroma(spectralPoints)\n}\n\nwindow.xyzTable.then(data => {\n  spectralPoints = data.map(d => {\n    let x = d.x;\n    let y = d.y;\n    let z = d.z;\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total\n    }\n  })\n  \n  syncStateAndRender()\n})\n\nslider.addEventListener('input', e => {\n  sliderValue.textContent = parseFloat(slider.value)\n  syncStateAndRender()\n})\nclipLow.addEventListener('change', e => syncStateAndRender())\nclipHigh.addEventListener('change', e => syncStateAndRender())\n```\n",1],[60,1,[1,"{\"lang\" \"js\", \"run\" true, \"title\" \"UI wiring up\"}"],1],[60,2,58,1],[60,3,1,1],[60,4,"const slider = document.querySelector('#y-slider');\nconst sliderValue = document.querySelector('#y-slider-value');\nconst clipLow = document.querySelector('#clip-low');\nconst clipHigh = document.querySelector('#clip-high');\n\nlet spectralPoints = [];\n\nfunction syncStateAndRender() {\n  window.chromaState = {\n    Y: parseFloat(slider.value),\n    clipLow: clipLow.checked,\n    clipHigh: clipHigh.checked\n  }\n  \n  window.renderChroma(spectralPoints)\n}\n\nwindow.xyzTable.then(data => {\n  spectralPoints = data.map(d => {\n    let x = d.x;\n    let y = d.y;\n    let z = d.z;\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total\n    }\n  })\n  \n  syncStateAndRender()\n})\n\nslider.addEventListener('input', e => {\n  sliderValue.textContent = parseFloat(slider.value)\n  syncStateAndRender()\n})\nclipLow.addEventListener('change', e => syncStateAndRender())\nclipHigh.addEventListener('change', e => syncStateAndRender())",1],[60,5,"code",1],[60,6,"53fcdd3e-a55b-4c4e-b2fe-6146954ba5fa",1],[61,0,"```html run\n<div style=\"display: flex; flex-direction: column; gap: 5px; margin-top: 15px\">\n  <div style=\"display: flex; gap: 10px\">Y: <input type=\"range\" step=\".01\" min=\"0\" max=\"1\" id=\"y-slider\" value=\"1.0\" /> <span id=\"y-slider-value\">1</span></div>\n  <div><input type=\"checkbox\" id=\"clip-low\" checked /> <label for=\"clip-low\">Clip colors low (less than 0)</label></div>\n  <div><input type=\"checkbox\" id=\"clip-high\"/> <label for=\"clip-high\">Clip colors max (greater than 255)</label></div>\n</div>\n```\n",1],[61,1,[1,"{\"lang\" \"html\", \"run\" true}"],1],[61,2,59,1],[61,3,1,1],[61,4,"<div style=\"display: flex; flex-direction: column; gap: 5px; margin-top: 15px\">\n  <div style=\"display: flex; gap: 10px\">Y: <input type=\"range\" step=\".01\" min=\"0\" max=\"1\" id=\"y-slider\" value=\"1.0\" /> <span id=\"y-slider-value\">1</span></div>\n  <div><input type=\"checkbox\" id=\"clip-low\" checked /> <label for=\"clip-low\">Clip colors low (less than 0)</label></div>\n  <div><input type=\"checkbox\" id=\"clip-high\"/> <label for=\"clip-high\">Clip colors max (greater than 255)</label></div>\n</div>",1],[61,5,"code",1],[61,6,"37261383-1613-43a3-8636-9a075d860f03",1],[62,0,"That's neat! We're getting somewhere, and are obviously constrained by the RGB space. By default, it clips colors with negative values and that produces this triangle. Feels like the dots are starting to connect: the above image is clearly showing connections between XYZ/RGB and limitations of representable colors.\n",1],[62,1,[1,"{}"],1],[62,2,60,1],[62,3,1,1],[62,4,"That's neat! We're getting somewhere, and are obviously constrained by the RGB space. By default, it clips colors with negative values and that produces this triangle. Feels like the dots are starting to connect: the above image is clearly showing connections between XYZ/RGB and limitations of representable colors.",1],[62,5,"paragraph",1],[62,6,"abde414f-632e-4d8c-b1cf-1e6fbe4fad56",1],[63,0,"Even more interesting is if you turn on \"clip colors max\". You only see a small slice of color, and you need to move the `Y` slider morph the shape to \"fill\" the triangle. Almost like we're moving through 3d space.\n",1],[63,1,[1,"{}"],1],[63,2,61,1],[63,3,1,1],[63,4,"Even more interesting is if you turn on \"clip colors max\". You only see a small slice of color, and you need to move the Y slider morph the shape to \"fill\" the triangle. Almost like we're moving through 3d space.",1],[63,5,"paragraph",1],[63,6,"06cbcf62-a5c3-4025-a515-4f579192ec52",1],[64,0,"For each point, there must be a different `Y` value that is the most optimal representation of that color. For example, blues are rich when `Y` is low, but greens are only rich when `Y` is higher.\n",1],[64,1,[1,"{}"],1],[64,2,62,1],[64,3,1,1],[64,4,"For each point, there must be a different Y value that is the most optimal representation of that color. For example, blues are rich when Y is low, but greens are only rich when Y is higher.",1],[64,5,"paragraph",1],[64,6,"54deafe3-adf9-4792-8ad2-7144edec5e77",1],[65,0,"## Taking a break: spectrums\n",1],[65,1,[1,"{}"],1],[65,2,63,1],[65,3,1,1],[65,4,"Taking a break: spectrums",1],[65,5,"heading",1],[65,6,"f309731d-22d6-4054-b44b-d707bc75719e",1],[66,0,"I'm still confused how to fill that space within the chromaticity diagram, so let's take a break.\n",1],[66,1,[1,"{}"],1],[66,2,64,1],[66,3,1,1],[66,4,"I'm still confused how to fill that space within the chromaticity diagram, so let's take a break.",1],[66,5,"paragraph",1],[66,6,"21a180c6-6656-4fcc-8f59-fbd38295b9ba",1],[67,0,"Let's create a spectrum. Take the original color matching function. Since that is telling us the XYZ values needed to create a spectral color, shouldn't we be able to iterate over the wavelengths of visible colors (400-720), get the XYZ values for each one, and convert them to RGB and render a spectrum?\n",1],[67,1,[1,"{}"],1],[67,2,65,1],[67,3,1,1],[67,4,"Let's create a spectrum. Take the original color matching function. Since that is telling us the XYZ values needed to create a spectral color, shouldn't we be able to iterate over the wavelengths of visible colors (400-720), get the XYZ values for each one, and convert them to RGB and render a spectrum?",1],[67,5,"paragraph",1],[67,6,"69150c04-c6a8-421c-a636-a0404cd4a4d6",1],[68,0,"```js run\nwindow.renderSpectrum = (toRGB) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = 640;\n  canvas.height = 100;\n  const ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\n  window.xyzTable.then(data => {\n    for(let i=400; i<=720; i++) {\n      const wavelength = i;\n      const x = (i - 400) / 1;\n\n      const d = data.find(d => d.wavelength === wavelength);\n      const [r, g, b] = toRGB(d.x, d.y, d.z);\n\n      if(toRGB === window.XYZ_to_WideGamutRGB) {\n        const [r2, g2, b2] = XYZ_to_sRGB(d.x, d.y, d.z);\n\n        ctx.fillStyle = `rgb(${r2}, ${g2}, ${b2})`;\n        ctx.fillRect(x * 2, 0, 2, 50)\n\n        ctx.fillStyle = `color(display-p3 ${r} ${g} ${b})`;      \n        ctx.fillRect(x * 2, 50, 2, 50)\n      }\n      else {\n        ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n        ctx.fillRect(x * 2, 0, 2, 100)\n      }\n    }\n  })\n\n  return canvas;\n}\n```\n",1],[68,1,[1,"{\"lang\" \"js\", \"run\" true}"],1],[68,2,66,1],[68,3,1,1],[68,4,"window.renderSpectrum = (toRGB) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = 640;\n  canvas.height = 100;\n  const ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\n  window.xyzTable.then(data => {\n    for(let i=400; i<=720; i++) {\n      const wavelength = i;\n      const x = (i - 400) / 1;\n\n      const d = data.find(d => d.wavelength === wavelength);\n      const [r, g, b] = toRGB(d.x, d.y, d.z);\n\n      if(toRGB === window.XYZ_to_WideGamutRGB) {\n        const [r2, g2, b2] = XYZ_to_sRGB(d.x, d.y, d.z);\n\n        ctx.fillStyle = `rgb(${r2}, ${g2}, ${b2})`;\n        ctx.fillRect(x * 2, 0, 2, 50)\n\n        ctx.fillStyle = `color(display-p3 ${r} ${g} ${b})`;      \n        ctx.fillRect(x * 2, 50, 2, 50)\n      }\n      else {\n        ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n        ctx.fillRect(x * 2, 0, 2, 100)\n      }\n    }\n  })\n\n  return canvas;\n}",1],[68,5,"code",1],[68,6,"f1678544-515b-49bd-b1b4-6e659ee04500",1],[69,0,"```js run height=100\nrender(window.renderSpectrum(XYZ_to_RGB))\n```\n",1],[69,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 100}"],1],[69,2,67,1],[69,3,1,1],[69,4,"render(window.renderSpectrum(XYZ_to_RGB))",1],[69,5,"code",1],[69,6,"58f2e0cb-3dcf-4124-b22e-81ce0672b138",1],[70,0,"This looks pretty bad, but why? I found a [nice article](https://aty.sdsu.edu/explain/optics/rendering.html) about rendering spectra which seems like another deep hole. My problems aren't even close to that kind of accuracy; the above isn't remotely close.\n",1],[70,1,[1,"{}"],1],[70,2,68,1],[70,3,1,1],[70,4,"This looks pretty bad, but why? I found a nice article about rendering spectra which seems like another deep hole. My problems aren't even close to that kind of accuracy; the above isn't remotely close.",1],[70,5,"paragraph",1],[70,6,"65330440-25f0-4dee-9951-b4ea10999838",1],[71,0,"Turn out I need to convert XYZ to sRGB because that's what the `rgb()` color function is assuming when rendering to canvas. The main difference is *gamma correction* which is another topic.\n",1],[71,1,[1,"{}"],1],[71,2,69,1],[71,3,1,1],[71,4,"Turn out I need to convert XYZ to sRGB because that's what the rgb() color function is assuming when rendering to canvas. The main difference is gamma correction which is another topic.",1],[71,5,"paragraph",1],[71,6,"fd7a61d3-8154-4bec-88d9-fc80db84f364",1],[72,0,"```js run height=100\nrender(window.renderSpectrum(XYZ_to_sRGB))\n```\n",1],[72,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 100}"],1],[72,2,70,1],[72,3,1,1],[72,4,"render(window.renderSpectrum(XYZ_to_sRGB))",1],[72,5,"code",1],[72,6,"65c0d52f-f71d-4847-b246-97d6a4159f33",1],[73,0,"We've learned that sRGB can only render a subset of all colors, and turns out there are other color spaces we can use to tell browsers to render more colors. The [p3](https://en.wikipedia.org/wiki/DCI-P3) wide gamut color space is larger than sRGB, and many browsers and displays support it now, so let's test it.\n",1],[73,1,[1,"{}"],1],[73,2,71,1],[73,3,1,1],[73,4,"We've learned that sRGB can only render a subset of all colors, and turns out there are other color spaces we can use to tell browsers to render more colors. The p3 wide gamut color space is larger than sRGB, and many browsers and displays support it now, so let's test it.",1],[73,5,"paragraph",1],[73,6,"54f0f85c-a218-4a3f-9d8d-972f7e67d22b",1],[74,0,"You specify this color space by using the [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color) function in CSS, for example: `color(display-p3 r, g, b)`. I ran into the same problems where the colors were all wrong, which was surprising because everything I read implied it was linear. Turns out the p3 color space in browsers has the same gamma correction as sRGB, so I needed to include that to get it to work:\n",1],[74,1,[1,"{}"],1],[74,2,72,1],[74,3,1,1],[74,4,"You specify this color space by using the color function in CSS, for example: color(display-p3 r, g, b). I ran into the same problems where the colors were all wrong, which was surprising because everything I read implied it was linear. Turns out the p3 color space in browsers has the same gamma correction as sRGB, so I needed to include that to get it to work:",1],[74,5,"paragraph",1],[74,6,"e27311ed-3d76-4eda-80c6-ae8f8322cc65",1],[75,0,"```js run height=100\nrender(window.renderSpectrum(XYZ_to_WideGamutRGB))\n```\n",1],[75,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 100}"],1],[75,2,73,1],[75,3,1,1],[75,4,"render(window.renderSpectrum(XYZ_to_WideGamutRGB))",1],[75,5,"code",1],[75,6,"ee2f45b1-5884-4960-9a1b-8a3a5e0e44da",1],[76,0,"If you are seeing this on a wide gamut compatible browser and display, you will see more intense colors. I love that this is a thing, and the idea that so many users are using apps that could be more richly displayed if they supported p3.\n",1],[76,1,[1,"{}"],1],[76,2,74,1],[76,3,1,1],[76,4,"If you are seeing this on a wide gamut compatible browser and display, you will see more intense colors. I love that this is a thing, and the idea that so many users are using apps that could be more richly displayed if they supported p3.",1],[76,5,"paragraph",1],[76,6,"8a9e036c-95ef-4bb8-bfb3-e47bb6e2dad7",1],[77,0,"I started having an existential crisis around this point. What are my eyes actually seeing? How do displays... actually work? Looking at the wide gamut spectrum above, what happens if I take a screenshot of it in macOS and send it to a user using a display that doesn't support p3?\n",1],[77,1,[1,"{}"],1],[77,2,75,1],[77,3,1,1],[77,4,"I started having an existential crisis around this point. What are my eyes actually seeing? How do displays... actually work? Looking at the wide gamut spectrum above, what happens if I take a screenshot of it in macOS and send it to a user using a display that doesn't support p3?",1],[77,5,"paragraph",1],[77,6,"2868697e-fa46-496f-a263-7a29fd786010",1],[78,0,"To test this I started a zoom chat with a friend and shared my screen and showed them the wide gamut spectrum and asked if they could see a difference (the top and bottom should look different). Turns out they could! I have no idea if macOS, zoom, or something else is translating it into sRGB (thus \"downgrading\" the colors) or actually transmitting p3. (Also, PNG supports p3, but what do monitors that don't support it do?)\n",1],[78,1,[1,"{}"],1],[78,2,76,1],[78,3,1,1],[78,4,"To test this I started a zoom chat with a friend and shared my screen and showed them the wide gamut spectrum and asked if they could see a difference (the top and bottom should look different). Turns out they could! I have no idea if macOS, zoom, or something else is translating it into sRGB (thus \"downgrading\" the colors) or actually transmitting p3. (Also, PNG supports p3, but what do monitors that don't support it do?)",1],[78,5,"paragraph",1],[78,6,"7f0cb2de-7fa2-4701-9cf9-5af1c4eef230",1],[79,0,"The sheer complexity of abstractions between my eyes and pixels is overwhelming. There are so many layers which handle reading and writing the individual pixels on my screen, and making it all work across zoom chats, screenshots, and everything is making my mind melt.\n",1],[79,1,[1,"{}"],1],[79,2,77,1],[79,3,1,1],[79,4,"The sheer complexity of abstractions between my eyes and pixels is overwhelming. There are so many layers which handle reading and writing the individual pixels on my screen, and making it all work across zoom chats, screenshots, and everything is making my mind melt.",1],[79,5,"paragraph",1],[79,6,"ece31e7a-153c-4a5e-8da6-7b2f877c9cb8",1],[80,0,"Let's move on.\n",1],[80,1,[1,"{}"],1],[80,2,78,1],[80,3,1,1],[80,4,"Let's move on.",1],[80,5,"paragraph",1],[80,6,"ad83ec83-605b-4529-8e6f-497200824a6c",1],[81,0,"***A little question:** why does printing use the CMY color system with the primaries of cyan, magenta, and yellow, while digital displays build pixels with the primaries of reg, green, and blue? If cyan, magenta, and yellow allow a wider range of colors via mixing why is RGB better digitally? Answer: because RGB is an additive color system and CMY is a subtractive color system. Materials absorb light, while digital displays emit light.*\n",1],[81,1,[1,"{}"],1],[81,2,79,1],[81,3,1,1],[81,4,"A little question: why does printing use the CMY color system with the primaries of cyan, magenta, and yellow, while digital displays build pixels with the primaries of reg, green, and blue? If cyan, magenta, and yellow allow a wider range of colors via mixing why is RGB better digitally? Answer: because RGB is an additive color system and CMY is a subtractive color system. Materials absorb light, while digital displays emit light.",1],[81,5,"paragraph",1],[81,6,"90f71016-5849-4375-a248-36b09ce05a86",1],[82,0,"## Back to the grind\n",1],[82,1,[1,"{}"],1],[82,2,80,1],[82,3,1,1],[82,4,"Back to the grind",1],[82,5,"heading",1],[82,6,"059ff968-b7ef-4fb9-bb7b-794601dfffec",1],[83,0,"We're not giving up on figuring out the colors of the chromaticity diagram yet.\n",1],[83,1,[1,"{}"],1],[83,2,81,1],[83,3,1,1],[83,4,"We're not giving up on figuring out the colors of the chromaticity diagram yet.",1],[83,5,"paragraph",1],[83,6,"a45a7773-2fee-4bc6-9583-723a567daa7d",1],[84,0,"I found [this incredible article](https://clarkvision.com/articles/color-cie-chromaticity-and-perception/) about how to populate chromaticity diagrams. I still have no idea if this is how the original ones were generated. After all, the colors shown are just an approximation (your screen can't actually display the true colors near the edges), so maybe there's some other kind of formula.\n",1],[84,1,[1,"{}"],1],[84,2,82,1],[84,3,1,1],[84,4,"I found this incredible article about how to populate chromaticity diagrams. I still have no idea if this is how the original ones were generated. After all, the colors shown are just an approximation (your screen can't actually display the true colors near the edges), so maybe there's some other kind of formula.",1],[84,5,"paragraph",1],[84,6,"00a40b2e-5b14-4234-95c2-a3f4b4685715",1],[85,0,"So that I can get back to my daily life and be present with my family, I'm accepting that this is how those images are generated. Let's try do it ourselves.\n",1],[85,1,[1,"{}"],1],[85,2,83,1],[85,3,1,1],[85,4,"So that I can get back to my daily life and be present with my family, I'm accepting that this is how those images are generated. Let's try do it ourselves.",1],[85,5,"paragraph",1],[85,6,"dad4cddc-85b6-4357-ab9a-b25e9384f00e",1],[86,0,"There's no way to go from an `x, y` point in the canvas to a color. There's no formula tells us if it's a valid point in space or how to approximate a color for it.\n",1],[86,1,[1,"{}"],1],[86,2,84,1],[86,3,1,1],[86,4,"There's no way to go from an x, y point in the canvas to a color. There's no formula tells us if it's a valid point in space or how to approximate a color for it.",1],[86,5,"paragraph",1],[86,6,"cc2ddc9a-19dc-4c08-b96b-596892d37b1b",1],[87,0,"We need to do the opposite: start with an value in the XYZ color space, compute an approximate color, and plot it at the right point by converting it into xy space. But how do we even find valid XYZ values? Not all points are valid inside that space (between 0 and 1 on all three axes). To do *that* we have to take another step back.\n",1],[87,1,[1,"{}"],1],[87,2,85,1],[87,3,1,1],[87,4,"We need to do the opposite: start with an value in the XYZ color space, compute an approximate color, and plot it at the right point by converting it into xy space. But how do we even find valid XYZ values? Not all points are valid inside that space (between 0 and 1 on all three axes). To do that we have to take another step back.",1],[87,5,"paragraph",1],[87,6,"28e7a705-3963-4fad-a498-660be6b615ca",1],[88,0,"I got this technique from the [incredible article](https://clarkvision.com/articles/color-cie-chromaticity-and-perception/) linked above. What we're trying to is **render all colors in existence**. Obviously we can't actually do that, so we need an approximation. Here's the approach we'll take:\n",1],[88,1,[1,"{}"],1],[88,2,86,1],[88,3,1,1],[88,4,"I got this technique from the incredible article linked above. What we're trying to is render all colors in existence. Obviously we can't actually do that, so we need an approximation. Here's the approach we'll take:",1],[88,5,"paragraph",1],[88,6,"a67ea074-9280-4a1b-8132-d626b5021f86",1],[89,0,"First, we need to generate an arbitrary color. The only way to do this is to generate a [spectral line shape](https://en.wikipedia.org/wiki/Spectral_line_shape). Basically it's a line across all wavelengths (the X axis) that defines how much each wavelength contributes to the color.\n",1],[89,1,[1,"{}"],1],[89,2,87,1],[89,3,1,1],[89,4,"First, we need to generate an arbitrary color. The only way to do this is to generate a spectral line shape. Basically it's a line across all wavelengths (the X axis) that defines how much each wavelength contributes to the color.",1],[89,5,"paragraph",1],[89,6,"0cd51f2e-d6ce-4910-8882-0653a4f8e000",1],[90,0,"To get the xy, coordinate on the canvas, we need to get the XYZ values for the color. To do that, we multiply the XYZ color matching functions with the spectral line, and then take the integral of each line to get the final XYZ values.\n",1],[90,1,[1,"{}"],1],[90,2,88,1],[90,3,1,1],[90,4,"To get the xy, coordinate on the canvas, we need to get the XYZ values for the color. To do that, we multiply the XYZ color matching functions with the spectral line, and then take the integral of each line to get the final XYZ values.",1],[90,5,"paragraph",1],[90,6,"a0db1b0a-2468-48f7-983f-5c7571cb2b05",1],[91,0,"We do the same for the RGB color. We multiply the RGB color matching functions with the spectral line and take the integral of each one for the final RGB color. (We'll talk about the colors more later)\n",1],[91,1,[1,"{}"],1],[91,2,89,1],[91,3,1,1],[91,4,"We do the same for the RGB color. We multiply the RGB color matching functions with the spectral line and take the integral of each one for the final RGB color. (We'll talk about the colors more later)",1],[91,5,"paragraph",1],[91,6,"5f150de8-c503-430f-b0a6-dd0e6bcf53bc",1],[92,0,"I don't know if that made any sense, but here's a demo which might help. The graph in the bottom left is the spectral line we are generating. This represents a specific color, which is shown in the top left. Finally, on the right we plot the color on the chromaticity diagram by summing up the area of the spectral line multiplied by the XYZ color matching functions.\n",1],[92,1,[1,"{}"],1],[92,2,90,1],[92,3,1,1],[92,4,"I don't know if that made any sense, but here's a demo which might help. The graph in the bottom left is the spectral line we are generating. This represents a specific color, which is shown in the top left. Finally, on the right we plot the color on the chromaticity diagram by summing up the area of the spectral line multiplied by the XYZ color matching functions.",1],[92,5,"paragraph",1],[92,6,"d49bcbaa-9441-4e4a-9b50-d688b9ff844b",1],[93,0,"We generated the spectral line graph with two simple sine curves with a specific width and offset. You can change the offset of each curve with the sliders below. You can see that moving those curves, which generates a different spectral line (and thus color) which plots different points on the diagram.\n",1],[93,1,[1,"{}"],1],[93,2,91,1],[93,3,1,1],[93,4,"We generated the spectral line graph with two simple sine curves with a specific width and offset. You can change the offset of each curve with the sliders below. You can see that moving those curves, which generates a different spectral line (and thus color) which plots different points on the diagram.",1],[93,5,"paragraph",1],[93,6,"cff959fd-c60d-4cbe-84ee-f44952594d18",1],[94,0,"**By adjusting the sliders, you are basically painting the chromaticity diagram!**\n",1],[94,1,[1,"{}"],1],[94,2,92,1],[94,3,1,1],[94,4,"By adjusting the sliders, you are basically painting the chromaticity diagram!",1],[94,5,"paragraph",1],[94,6,"f34365f6-2219-499e-8b55-4b2f16c9df14",1],[95,0,"```html run height=600\n<div style=\"display: flex; gap: 20px; flex-direction: row\">\n  <div>\n    <div>Offset 1: <input type=\"range\" min=\"1\" max=\"350\" id=\"spectral-offset-slider1\" value=\"30\" /></div>\n    <div>Offset 2: <input type=\"range\" min=\"1\" max=\"350\" id=\"spectral-offset-slider2\" value=\"30\" /></div>\n    <div id=\"spectral-box\" style=\"width: 100px; height: 100px; margin-bottom: 20px\"></div>\n    <div id=\"spectral-plot\"></div>\n  </div>\n  <div id=\"spectral-canvas\"></div>\n</div>\n```\n",1],[95,1,[1,"{\"lang\" \"html\", \"run\" true, \"height\" 600}"],1],[95,2,93,1],[95,3,1,1],[95,4,"<div style=\"display: flex; gap: 20px; flex-direction: row\">\n  <div>\n    <div>Offset 1: <input type=\"range\" min=\"1\" max=\"350\" id=\"spectral-offset-slider1\" value=\"30\" /></div>\n    <div>Offset 2: <input type=\"range\" min=\"1\" max=\"350\" id=\"spectral-offset-slider2\" value=\"30\" /></div>\n    <div id=\"spectral-box\" style=\"width: 100px; height: 100px; margin-bottom: 20px\"></div>\n    <div id=\"spectral-plot\"></div>\n  </div>\n  <div id=\"spectral-canvas\"></div>\n</div>",1],[95,5,"code",1],[95,6,"8d9648e0-c647-4478-88b4-88b6e133d556",1],[96,0,"```js run title=\"generate line + calculate integral\"\nconst offsetSlider1 = document.querySelector('#spectral-offset-slider1');\nconst offsetSlider2 = document.querySelector('#spectral-offset-slider2');\nconst plot = document.querySelector('#spectral-plot');\nconst spectralBox = document.querySelector('#spectral-box');\n\nfunction run(xyzData, rgbData) {\n  function scope(x) {\n    return Math.max(Math.min(x, Math.PI), 0);\n  }\n\n  function renderWidth(w, offset, offset2) {\n    const data = Array.from(new Array(780 - 380), (_, idx) => {\n      const x = idx;\n      const total = 780 - 380;\n      \n      const sin1 = Math.sin(scope((idx - offset) / total * Math.PI * (total / w))) * .2;\n      const sin2 = Math.sin(scope((idx - offset2) / total * Math.PI * (total / 30))) * .1;\n\n      return {\n        wavelength: idx + 380,\n        y: Math.max(sin1, sin2)\n      }\n    })\n\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    \n    let R = 0;\n    let G = 0;\n    let B = 0;\n\n    // Calculate the integral\n    for(let i=380; i<780; i++) {\n      const xyz = xyzData.find(d => d.wavelength === i);\n      const spectral = data[i - 380];\n      // Multiply the spectral line with the XYZ color matching functions\n      // to get each contribution\n      X += xyz.x * spectral.y;\n      Y += xyz.y * spectral.y;\n      Z += xyz.z * spectral.y;\n\n      const rgb = rgbData.find(d => d.wavelength === (i - i % 5));\n      R += rgb.r * spectral.y;\n      G += rgb.g * spectral.y;\n      B += rgb.b * spectral.y;\n    }\n\n    // If you want to use the XYZ->RGB conversion, use this\n    // const [r, g, b] = XYZ_to_sRGB(X, Y, Z);\n    \n    // If you want to use the rgb table, use the below instead of `XYZ_to_sRGB`\n    let [r, g,  b] = window.sRGB_gamma(\n      R / (R + G + B),\n      G / (R + G + B),\n      B / (R + G + B)\n    );\n    r *= 255;\n    g *= 255;\n    b *= 255;\n    \n    spectralBox.style.backgroundColor = `rgb(${r}, ${g}, ${b})`\n\n    plot.innerHTML = '';\n    plot.append(Plot.plot({\n      marks: [\n        Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'red'}),\n        Plot.ruleY([0])\n      ]\n    }))\n    \n    const x_ = X / (X + Y + Z);\n    const y_ = Y / (X + Y + Z);\n    window.renderPoint(x_, y_, r, g, b);\n  }\n\n  offsetSlider1.addEventListener('input', e => {\n    renderWidth(10,\n                parseInt(offsetSlider1.value),\n                parseInt(offsetSlider2.value))\n  })\n  offsetSlider2.addEventListener('input', e => {\n    renderWidth(10,\n                parseInt(offsetSlider1.value),\n                parseInt(offsetSlider2.value))\n  })\n  renderWidth(10,\n              parseInt(offsetSlider1.value),\n              parseInt(offsetSlider2.value))\n}\n\nPromise.all([window.xyzTable, window.rgbTable]).then(([xyz, rgb]) => run(xyz, rgb))\n```\n",1],[96,1,[1,"{\"lang\" \"js\", \"run\" true, \"title\" \"generate line + calculate integral\"}"],1],[96,2,94,1],[96,3,1,1],[96,4,"const offsetSlider1 = document.querySelector('#spectral-offset-slider1');\nconst offsetSlider2 = document.querySelector('#spectral-offset-slider2');\nconst plot = document.querySelector('#spectral-plot');\nconst spectralBox = document.querySelector('#spectral-box');\n\nfunction run(xyzData, rgbData) {\n  function scope(x) {\n    return Math.max(Math.min(x, Math.PI), 0);\n  }\n\n  function renderWidth(w, offset, offset2) {\n    const data = Array.from(new Array(780 - 380), (_, idx) => {\n      const x = idx;\n      const total = 780 - 380;\n      \n      const sin1 = Math.sin(scope((idx - offset) / total * Math.PI * (total / w))) * .2;\n      const sin2 = Math.sin(scope((idx - offset2) / total * Math.PI * (total / 30))) * .1;\n\n      return {\n        wavelength: idx + 380,\n        y: Math.max(sin1, sin2)\n      }\n    })\n\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    \n    let R = 0;\n    let G = 0;\n    let B = 0;\n\n    // Calculate the integral\n    for(let i=380; i<780; i++) {\n      const xyz = xyzData.find(d => d.wavelength === i);\n      const spectral = data[i - 380];\n      // Multiply the spectral line with the XYZ color matching functions\n      // to get each contribution\n      X += xyz.x * spectral.y;\n      Y += xyz.y * spectral.y;\n      Z += xyz.z * spectral.y;\n\n      const rgb = rgbData.find(d => d.wavelength === (i - i % 5));\n      R += rgb.r * spectral.y;\n      G += rgb.g * spectral.y;\n      B += rgb.b * spectral.y;\n    }\n\n    // If you want to use the XYZ->RGB conversion, use this\n    // const [r, g, b] = XYZ_to_sRGB(X, Y, Z);\n    \n    // If you want to use the rgb table, use the below instead of `XYZ_to_sRGB`\n    let [r, g,  b] = window.sRGB_gamma(\n      R / (R + G + B),\n      G / (R + G + B),\n      B / (R + G + B)\n    );\n    r *= 255;\n    g *= 255;\n    b *= 255;\n    \n    spectralBox.style.backgroundColor = `rgb(${r}, ${g}, ${b})`\n\n    plot.innerHTML = '';\n    plot.append(Plot.plot({\n      marks: [\n        Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'red'}),\n        Plot.ruleY([0])\n      ]\n    }))\n    \n    const x_ = X / (X + Y + Z);\n    const y_ = Y / (X + Y + Z);\n    window.renderPoint(x_, y_, r, g, b);\n  }\n\n  offsetSlider1.addEventListener('input', e => {\n    renderWidth(10,\n                parseInt(offsetSlider1.value),\n                parseInt(offsetSlider2.value))\n  })\n  offsetSlider2.addEventListener('input', e => {\n    renderWidth(10,\n                parseInt(offsetSlider1.value),\n                parseInt(offsetSlider2.value))\n  })\n  renderWidth(10,\n              parseInt(offsetSlider1.value),\n              parseInt(offsetSlider2.value))\n}\n\nPromise.all([window.xyzTable, window.rgbTable]).then(([xyz, rgb]) => run(xyz, rgb))",1],[96,5,"code",1],[96,6,"745e770f-7635-4206-8f70-03d9d4f6d8d9",1],[97,0,"```js run title=\"canvas setup + renderPoint\"\nconst canvas = document.createElement('canvas');\nconst width = 400;\nconst height = 400;\ncanvas.width = width;\ncanvas.height = height;\ncanvas.style.border = '1px solid #f0f0f0'\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\nlet spectralPoints = [];\n\nctx.fillStyle = 'white';\nctx.fillRect(0, 0, width, height)\n\nwindow.renderPoint = (x, y, r, g, b) => {\n  // render the outline in black\n  spectralPoints.forEach(c => {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(c.x * width, (1 - c.y) * height, 4, 4)\n  });\n  \n  // render the specified point\n  ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n  const x_ = x * width;\n  const y_ = (1 - y) * height;\n  ctx.fillRect(x_ - 3, y_ - 3, 7, 7)\n}\n\nwindow.xyzTable.then(data => {\n  spectralPoints = data.map(d => {\n    let x = d.x;\n    let y = d.y;\n    let z = d.z;\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total\n    }\n  })\n})\n\ndocument.querySelector('#spectral-canvas').appendChild(canvas);\n```\n",1],[97,1,[1,"{\"lang\" \"js\", \"run\" true, \"title\" \"canvas setup + renderPoint\"}"],1],[97,2,95,1],[97,3,1,1],[97,4,"const canvas = document.createElement('canvas');\nconst width = 400;\nconst height = 400;\ncanvas.width = width;\ncanvas.height = height;\ncanvas.style.border = '1px solid #f0f0f0'\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\nlet spectralPoints = [];\n\nctx.fillStyle = 'white';\nctx.fillRect(0, 0, width, height)\n\nwindow.renderPoint = (x, y, r, g, b) => {\n  // render the outline in black\n  spectralPoints.forEach(c => {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(c.x * width, (1 - c.y) * height, 4, 4)\n  });\n  \n  // render the specified point\n  ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n  const x_ = x * width;\n  const y_ = (1 - y) * height;\n  ctx.fillRect(x_ - 3, y_ - 3, 7, 7)\n}\n\nwindow.xyzTable.then(data => {\n  spectralPoints = data.map(d => {\n    let x = d.x;\n    let y = d.y;\n    let z = d.z;\n\n    let total = x + y + z;\n    return {\n      wavelength: d.wavelength,\n      x: x / total,\n      y: y / total,\n      z: z / total\n    }\n  })\n})\n\ndocument.querySelector('#spectral-canvas').appendChild(canvas);",1],[97,5,"code",1],[97,6,"1746d85a-a910-4d17-8797-3a0cfb189124",1],[98,0,"You can see how all of this works but pressing \"view source\" to see the code.\n",1],[98,1,[1,"{}"],1],[98,2,96,1],[98,3,1,1],[98,4,"You can see how all of this works but pressing \"view source\" to see the code.",1],[98,5,"paragraph",1],[98,6,"d8b7cc33-fbea-4360-97e2-9e282d182c8b",1],[99,0,"Obviously this is a very poor representation of the chromaticity diagram. It's difficult to cover the whole area; adjusting the offset of the curves only allows you to walk through a subset of the entire space. We would need to change how we are generating spectral lines to fully walk through the space.\n",1],[99,1,[1,"{}"],1],[99,2,97,1],[99,3,1,1],[99,4,"Obviously this is a very poor representation of the chromaticity diagram. It's difficult to cover the whole area; adjusting the offset of the curves only allows you to walk through a subset of the entire space. We would need to change how we are generating spectral lines to fully walk through the space.",1],[99,5,"paragraph",1],[99,6,"505e9a9d-c79c-49c9-8b7d-76462a2864fc",1],[100,0,"Here's a demo which attempts to automate this. It's using the same code as above, except it's changing both offset and width of the curves and walking through the space better:\n",1],[100,1,[1,"{}"],1],[100,2,98,1],[100,3,1,1],[100,4,"Here's a demo which attempts to automate this. It's using the same code as above, except it's changing both offset and width of the curves and walking through the space better:",1],[100,5,"paragraph",1],[100,6,"c166dbbb-c760-486e-bbe9-f450198c61ec",1],[101,0,"```js run\nwindow.startOnVisible = (node, func) => {\n  let hasCalled = false;\n  let options = {\n    threshold: 0.9,\n  };\n\n  let observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if(entry.isIntersecting) {\n        if(!hasCalled) {\n          hasCalled = true;\n          func()\n        }\n      }\n    })\n\n  }, options);\n  observer.observe(node);\n}\n```\n",1],[101,1,[1,"{\"lang\" \"js\", \"run\" true}"],1],[101,2,99,1],[101,3,1,1],[101,4,"window.startOnVisible = (node, func) => {\n  let hasCalled = false;\n  let options = {\n    threshold: 0.9,\n  };\n\n  let observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if(entry.isIntersecting) {\n        if(!hasCalled) {\n          hasCalled = true;\n          func()\n        }\n      }\n    })\n\n  }, options);\n  observer.observe(node);\n}",1],[101,5,"code",1],[101,6,"8fca1eee-41fd-4a71-874e-fc538a85133b",1],[102,0,"```js run title=\"walking through the color space to form chromaticity\"\nconst width = 500;\nconst height = 500;\nconst canvas = document.createElement('canvas');\ncanvas.style.border = '1px solid #f0f0f0'\n\ncanvas.width = width * 2;\ncanvas.height = height * 2;\ncanvas.style.maxWidth = `min(${width}px, 100%)`;\n\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\nctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\nfunction scope(x) {\n  return Math.max(Math.min(x, Math.PI), 0);\n}\n\nfunction run(xyzData, rgbData) {\n  function render(fixedWidth, fixedOffset, w, offset) {\n    const data = Array.from(new Array(780 - 380), (_, idx) => {\n      const x = idx;\n      const total = 780 - 380;\n\n      const sin1 = Math.sin(scope((idx - offset) / total * Math.PI * (total / w))) * .2;\n      const sin2 = Math.sin(scope((idx - fixedOffset) / total * Math.PI * (total / fixedWidth))) * .1;\n\n      return {\n        wavelength: idx + 380,\n        y: Math.max(sin1, sin2)\n      }\n    })\n\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    \n    let R = 0;\n    let G = 0;\n    let B = 0;\n\n    for(let i=380; i<780; i++) {\n      const xyz = xyzData.find(d => d.wavelength === i);\n      const spectral = data[i - 380];\n      X += xyz.x * spectral.y;\n      Y += xyz.y * spectral.y;\n      Z += xyz.z * spectral.y;\n\n      const rgb = rgbData.find(d => d.wavelength === (i - i % 5));\n      R += rgb.r * spectral.y;\n      G += rgb.g * spectral.y;\n      B += rgb.b * spectral.y;\n    }\n\n    const x = X / (X + Y + Z);\n    const y = Y / (X + Y + Z);\n    const z = Z / (X + Y + Z);\n \n    // If you want to use the XYZ->RGB conversion, use this\n    // const [r, g, b] = XYZ_to_sRGB(X, Y, Z);\n    \n    // If you want to use the rgb table, use the below instead of `XYZ_to_sRGB`\n    let [r, g,  b] = window.sRGB_gamma(\n      R / (R + G + B),\n      G / (R + G + B),\n      B / (R + G + B)\n    );\n    r *= 255;\n    g *= 255;\n    b *= 255;\n \n    const x_ = x * width;\n    const y_ = (1 - y) * height;\n    \n    // If you want clipping, uncomment this and wrap the code below with it\n    // if(r>=0 && g>=0 && b>=0 && r<=255 && g<=255 && b<=255) {}\n    \n    ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n    ctx.fillRect(x_ - 1, y_ - 1, 3, 3)\n  }\n  \n  function raf(func) {\n    requestAnimationFrame(func);\n  }\n\n  function renderNextStep(fixedOffset, fixedWidth, offset) {\n    render(fixedWidth, fixedOffset, 47, offset)\n\n    if(offset < 400 - 30) {\n      raf(() => renderNextStep(fixedOffset, fixedWidth, offset + 5));\n    }\n    else {\n      raf(() => renderNextFixed(fixedOffset + 5, fixedWidth));\n    }\n  }\n  \n  function renderNextFixed(fixedOffset, fixedWidth) {\n    if(fixedOffset < 400 - 30) {\n      raf(() => renderNextStep(fixedOffset, fixedWidth, 0))\n    }\n    else if(fixedWidth < 200) {\n      const newWidth = fixedWidth + 5;\n      raf(() => renderNextFixed(newWidth / 2 | 0, newWidth))\n    }\n  }\n\n  window.startOnVisible(canvas, () => renderNextFixed(10, 50));\n\n  return canvas;\n}\n\nrender(window.xyzTable.then(xyz => window.rgbTable.then(rgb => run(xyz, rgb))))\n```\n",1],[102,1,[1,"{\"lang\" \"js\", \"run\" true, \"title\" \"walking through the color space to form chromaticity\"}"],1],[102,2,100,1],[102,3,1,1],[102,4,"const width = 500;\nconst height = 500;\nconst canvas = document.createElement('canvas');\ncanvas.style.border = '1px solid #f0f0f0'\n\ncanvas.width = width * 2;\ncanvas.height = height * 2;\ncanvas.style.maxWidth = `min(${width}px, 100%)`;\n\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\nctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\nfunction scope(x) {\n  return Math.max(Math.min(x, Math.PI), 0);\n}\n\nfunction run(xyzData, rgbData) {\n  function render(fixedWidth, fixedOffset, w, offset) {\n    const data = Array.from(new Array(780 - 380), (_, idx) => {\n      const x = idx;\n      const total = 780 - 380;\n\n      const sin1 = Math.sin(scope((idx - offset) / total * Math.PI * (total / w))) * .2;\n      const sin2 = Math.sin(scope((idx - fixedOffset) / total * Math.PI * (total / fixedWidth))) * .1;\n\n      return {\n        wavelength: idx + 380,\n        y: Math.max(sin1, sin2)\n      }\n    })\n\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    \n    let R = 0;\n    let G = 0;\n    let B = 0;\n\n    for(let i=380; i<780; i++) {\n      const xyz = xyzData.find(d => d.wavelength === i);\n      const spectral = data[i - 380];\n      X += xyz.x * spectral.y;\n      Y += xyz.y * spectral.y;\n      Z += xyz.z * spectral.y;\n\n      const rgb = rgbData.find(d => d.wavelength === (i - i % 5));\n      R += rgb.r * spectral.y;\n      G += rgb.g * spectral.y;\n      B += rgb.b * spectral.y;\n    }\n\n    const x = X / (X + Y + Z);\n    const y = Y / (X + Y + Z);\n    const z = Z / (X + Y + Z);\n \n    // If you want to use the XYZ->RGB conversion, use this\n    // const [r, g, b] = XYZ_to_sRGB(X, Y, Z);\n    \n    // If you want to use the rgb table, use the below instead of `XYZ_to_sRGB`\n    let [r, g,  b] = window.sRGB_gamma(\n      R / (R + G + B),\n      G / (R + G + B),\n      B / (R + G + B)\n    );\n    r *= 255;\n    g *= 255;\n    b *= 255;\n \n    const x_ = x * width;\n    const y_ = (1 - y) * height;\n    \n    // If you want clipping, uncomment this and wrap the code below with it\n    // if(r>=0 && g>=0 && b>=0 && r<=255 && g<=255 && b<=255) {}\n    \n    ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n    ctx.fillRect(x_ - 1, y_ - 1, 3, 3)\n  }\n  \n  function raf(func) {\n    requestAnimationFrame(func);\n  }\n\n  function renderNextStep(fixedOffset, fixedWidth, offset) {\n    render(fixedWidth, fixedOffset, 47, offset)\n\n    if(offset < 400 - 30) {\n      raf(() => renderNextStep(fixedOffset, fixedWidth, offset + 5));\n    }\n    else {\n      raf(() => renderNextFixed(fixedOffset + 5, fixedWidth));\n    }\n  }\n  \n  function renderNextFixed(fixedOffset, fixedWidth) {\n    if(fixedOffset < 400 - 30) {\n      raf(() => renderNextStep(fixedOffset, fixedWidth, 0))\n    }\n    else if(fixedWidth < 200) {\n      const newWidth = fixedWidth + 5;\n      raf(() => renderNextFixed(newWidth / 2 | 0, newWidth))\n    }\n  }\n\n  window.startOnVisible(canvas, () => renderNextFixed(10, 50));\n\n  return canvas;\n}\n\nrender(window.xyzTable.then(xyz => window.rgbTable.then(rgb => run(xyz, rgb))))",1],[102,5,"code",1],[102,6,"f4b2efdc-969f-4f52-a3f0-265b435cce06",1],[103,0,"I created an [isolated codepen](https://codepen.io/jlongster/pen/QWoEwXr?editors=0010) if you want to play with this yourself. If you let this run for a while, you'll end up with a shape like this:\n",1],[103,1,[1,"{}"],1],[103,2,101,1],[103,3,1,1],[103,4,"I created an isolated codepen if you want to play with this yourself. If you let this run for a while, you'll end up with a shape like this:",1],[103,5,"paragraph",1],[103,6,"4e7c8493-5cde-4a0e-a8fd-e8fbebfc73a7",1],[104,0,"<figure>\n  <img src=\"https://static.jlongster.com/20240105/ScreenShot2024-01-05e.png\" />\n  <figcaption>Our rendering of the chromaticity diagram. I'll take it?</figcaoption>\n</figure>\n",1],[104,1,[1,"{}"],1],[104,2,102,1],[104,3,1,1],[104,4,"<figure>\n  <img src=\"https://static.jlongster.com/20240105/ScreenShot2024-01-05e.png\" />\n  <figcaption>Our rendering of the chromaticity diagram. I'll take it?</figcaoption>\n</figure>",1],[104,5,"html",1],[104,6,"a0d11c27-c08c-4906-988f-a90f47e89ac3",1],[105,0,"We're still not walking through the full space, but it's not bad! It at least... vaguely resembles the original diagram?\n",1],[105,1,[1,"{}"],1],[105,2,103,1],[105,3,1,1],[105,4,"We're still not walking through the full space, but it's not bad! It at least... vaguely resembles the original diagram?",1],[105,5,"paragraph",1],[105,6,"07fdc650-a5c0-4247-8dbf-15ec7398562a",1],[106,0,"<figure>\n  <img src=\"https://static.jlongster.com/20240103/CIE1931xy_blank.svg\" />\n  <figcaption>By BenRG - Own work based on: CIExy1931.svg, Public Domain, https://commons.wikimedia.org/w/index.php?curid=7889658</figcaption>\n</figure>\n",1],[106,1,[1,"{}"],1],[106,2,104,1],[106,3,1,1],[106,4,"<figure>\n  <img src=\"https://static.jlongster.com/20240103/CIE1931xy_blank.svg\" />\n  <figcaption>By BenRG - Own work based on: CIExy1931.svg, Public Domain, https://commons.wikimedia.org/w/index.php?curid=7889658</figcaption>\n</figure>",1],[106,5,"html",1],[106,6,"8bb723a1-c6d2-4142-8e39-bcadd0f7e871",1],[107,0,"### What's going on with the colors?\n",1],[107,1,[1,"{}"],1],[107,2,105,1],[107,3,1,1],[107,4,"What's going on with the colors?",1],[107,5,"heading",1],[107,6,"b9f1cc3c-8ee5-4157-9c4a-929ecb60f9bc",1],[108,0,"Our coloring isn't quite right. It's missing the white spot in the middle and it's too dark in certain places. Let me explain a little more how we generated these colors.\n",1],[108,1,[1,"{}"],1],[108,2,106,1],[108,3,1,1],[108,4,"Our coloring isn't quite right. It's missing the white spot in the middle and it's too dark in certain places. Let me explain a little more how we generated these colors.",1],[108,5,"paragraph",1],[108,6,"f087d710-31ee-49f1-9250-79bea7cea19e",1],[109,0,"After all, didn't we generate RGB colors? If so, why weren't they clipped and showing a triangle like before? Or at least we should see more \"maxing out\" of colors near the edges.\n",1],[109,1,[1,"{}"],1],[109,2,107,1],[109,3,1,1],[109,4,"After all, didn't we generate RGB colors? If so, why weren't they clipped and showing a triangle like before? Or at least we should see more \"maxing out\" of colors near the edges.",1],[109,5,"paragraph",1],[109,6,"02e0e7dc-0e2b-4888-b487-477212cc54c6",1],[110,0,"My first attempts at the above *did* show this. Here's a picture where I only took the integral to find the XYZ values, and then took those values and used `XYZ_to_sRGB` to transform them into RGB colors:\n",1],[110,1,[1,"{}"],1],[110,2,108,1],[110,3,1,1],[110,4,"My first attempts at the above did show this. Here's a picture where I only took the integral to find the XYZ values, and then took those values and used XYZ_to_sRGB to transform them into RGB colors:",1],[110,5,"paragraph",1],[110,6,"bbec5204-d057-4494-bd54-a7d03481c4c3",1],[111,0,"<figure>\n  <img src=\"https://static.jlongster.com/20240105/ScreenShot2024-01-05.png\" />\n  <figcaption>Way too many \"maxed out\" colors</figcaption>\n</figure>\n",1],[111,1,[1,"{}"],1],[111,2,109,1],[111,3,1,1],[111,4,"<figure>\n  <img src=\"https://static.jlongster.com/20240105/ScreenShot2024-01-05.png\" />\n  <figcaption>Way too many \"maxed out\" colors</figcaption>\n</figure>",1],[111,5,"html",1],[111,6,"72c8f134-4175-4f6d-9028-567f2d57c6c3",1],[112,0,"We do get more of the bright white spot in the middle, but the colors are far too saturated. It's clear that many of these colors are actually invalid (they are not in between 0 and 255).\n",1],[112,1,[1,"{}"],1],[112,2,110,1],[112,3,1,1],[112,4,"We do get more of the bright white spot in the middle, but the colors are far too saturated. It's clear that many of these colors are actually invalid (they are not in between 0 and 255).",1],[112,5,"paragraph",1],[112,6,"b609f7cd-00f9-41ad-855a-a402fb9a189e",1],[113,0,"Another technique I learned from the [incredible article](https://clarkvision.com/articles/color-cie-chromaticity-and-perception/) is to avoid using the XYZ points to find the color, and instead do the same integration over the RGB color mapping functions. So we take our spectral line, multiple by each of the RGB functions, and then take the sum of each result to find the individual RGB values.\n",1],[113,1,[1,"{}"],1],[113,2,111,1],[113,3,1,1],[113,4,"Another technique I learned from the incredible article is to avoid using the XYZ points to find the color, and instead do the same integration over the RGB color mapping functions. So we take our spectral line, multiple by each of the RGB functions, and then take the sum of each result to find the individual RGB values.",1],[113,5,"paragraph",1],[113,6,"07c58d0b-593e-43ee-9ca3-bf9d0de6d7e5",1],[114,0,"Even though this still produces invalid colors, intuitively I can see how it more directly maps onto the RGB space and provides a better interpolation.\n",1],[114,1,[1,"{}"],1],[114,2,112,1],[114,3,1,1],[114,4,"Even though this still produces invalid colors, intuitively I can see how it more directly maps onto the RGB space and provides a better interpolation.",1],[114,5,"paragraph",1],[114,6,"ebd22aa5-c156-46a0-b61d-dea07121060f",1],[115,0,"That's about as far as I got. I wish I had a better answer for how to generate the colors here, and maybe you know? If so, [give me a shout!](https://twitter.com/jlongster) I'm satisfied with how far I got, and I bet the final answer uses slightly different color matching functions or something, but it doesn't feel far off.\n",1],[115,1,[1,"{}"],1],[115,2,113,1],[115,3,1,1],[115,4,"That's about as far as I got. I wish I had a better answer for how to generate the colors here, and maybe you know? If so, give me a shout! I'm satisfied with how far I got, and I bet the final answer uses slightly different color matching functions or something, but it doesn't feel far off.",1],[115,5,"paragraph",1],[115,6,"f7b12a58-bcf1-4b17-9225-074fc912ed5d",1],[116,0,"If you have ideas to improve this, please do so [in this demo](https://codepen.io/jlongster/pen/QWoEwXr?editors=0010)! I'd love to see any improvements.\n",1],[116,1,[1,"{}"],1],[116,2,114,1],[116,3,1,1],[116,4,"If you have ideas to improve this, please do so in this demo! I'd love to see any improvements.",1],[116,5,"paragraph",1],[116,6,"e14835aa-cbd9-43d6-8bd4-e9f1869fe6c2",1],[117,0,"I want to drive home that my above implementation *is* still generating invalid colors. For example, if I add clipping and avoid rendering any colors with elements outside of the 0-255 range, I get the familiar sRGB triangle:\n",1],[117,1,[1,"{}"],1],[117,2,115,1],[117,3,1,1],[117,4,"I want to drive home that my above implementation is still generating invalid colors. For example, if I add clipping and avoid rendering any colors with elements outside of the 0-255 range, I get the familiar sRGB triangle:",1],[117,5,"paragraph",1],[117,6,"6f3a0ca4-7122-4ee3-86cf-277aeaf67ae4",1],[118,0,"<figure>\n  <img src=\"https://static.jlongster.com/20240105/ScreenShot2024-01-05d.png\" />\n  <figcaption>Same image above but only showing valid RGB colors</figcaption>\n</figure>\n",1],[118,1,[1,"{}"],1],[118,2,116,1],[118,3,1,1],[118,4,"<figure>\n  <img src=\"https://static.jlongster.com/20240105/ScreenShot2024-01-05d.png\" />\n  <figcaption>Same image above but only showing valid RGB colors</figcaption>\n</figure>",1],[118,5,"html",1],[118,6,"e200cf21-4413-4a5e-80d5-5ddfd2c6da30",1],[119,0,"It turns out that even though colors outside the triangle aren't rendering accurately, we're still able to represent a change of color because only 1 or 2 of the RGB channels have maxed out. If green maxes out, changes in the red and blue channels will still show up.\n",1],[119,1,[1,"{}"],1],[119,2,117,1],[119,3,1,1],[119,4,"It turns out that even though colors outside the triangle aren't rendering accurately, we're still able to represent a change of color because only 1 or 2 of the RGB channels have maxed out. If green maxes out, changes in the red and blue channels will still show up.",1],[119,5,"paragraph",1],[119,6,"3b2309d5-560c-4362-941f-f3ab9789a67d",1],[120,0,"### More shape explorations\n",1],[120,1,[1,"{}"],1],[120,2,118,1],[120,3,1,1],[120,4,"More shape explorations",1],[120,5,"heading",1],[120,6,"bd71f8b7-0fa6-47d5-851f-12205294c3b8",1],[121,0,"But really, *why* that specific shape? I know it derives from how we perceive red, green, and blue relative to each other. Let's look at the XYZ color matching functions again:\n",1],[121,1,[1,"{}"],1],[121,2,119,1],[121,3,1,1],[121,4,"But really, why that specific shape? I know it derives from how we perceive red, green, and blue relative to each other. Let's look at the XYZ color matching functions again:",1],[121,5,"paragraph",1],[121,6,"09d75d4c-750c-4422-b509-340509fd046f",1],[122,0,"```js run height=410 title=\"XYZ color matching functions\"\nfunction run(data) {\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\nrender(window.xyzTable.then(run))\n```\n",1],[122,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410, \"title\" \"XYZ color matching functions\"}"],1],[122,2,120,1],[122,3,1,1],[122,4,"function run(data) {\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\nrender(window.xyzTable.then(run))",1],[122,5,"code",1],[122,6,"a757d92d-b371-42f0-bd7e-b8663c76b0cc",1],[123,0,"The shape is derived from *these* shapes. To render chromaticity, you walk through each wavelength above and calculate the percentage of each XYZ value of the total. So there's a direct relationship.\n",1],[123,1,[1,"{}"],1],[123,2,121,1],[123,3,1,1],[123,4,"The shape is derived from these shapes. To render chromaticity, you walk through each wavelength above and calculate the percentage of each XYZ value of the total. So there's a direct relationship.",1],[123,5,"paragraph",1],[123,6,"ae4d5d0d-a7aa-4d34-b5cb-03253a0d03c4",1],[124,0,"Let's drive this home by generating our own random color matching functions. We generate them with some simple sine waves (view source to see the code):\n",1],[124,1,[1,"{}"],1],[124,2,122,1],[124,3,1,1],[124,4,"Let's drive this home by generating our own random color matching functions. We generate them with some simple sine waves (view source to see the code):",1],[124,5,"paragraph",1],[124,6,"fa257de9-9099-47b0-9431-7257ef3d3220",1],[125,0,"```js run height=410\nfunction run(data) {\ndata = data.map((d, idx) => {\n  return {\n    ...d,\n    x: Math.sin(idx / 20 + 100) * .4 + .9,\n    y: Math.sin(idx / 40 + 140) * .7 + .72,\n    z: Math.sin(idx / 80 + 70) * .2 + 1,\n  }\n})\n\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\nrender(window.xyzTable.then(run))\n```\n",1],[125,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 410}"],1],[125,2,123,1],[125,3,1,1],[125,4,"function run(data) {\ndata = data.map((d, idx) => {\n  return {\n    ...d,\n    x: Math.sin(idx / 20 + 100) * .4 + .9,\n    y: Math.sin(idx / 40 + 140) * .7 + .72,\n    z: Math.sin(idx / 80 + 70) * .2 + 1,\n  }\n})\n\n  return Plot.plot({\n    marks: [\n      Plot.line(data, {x: \"wavelength\", y: \"x\", stroke: 'red'}),\n      Plot.line(data, {x: \"wavelength\", y: \"y\", stroke: 'green'}),\n      Plot.line(data, {x: \"wavelength\", y: \"z\", stroke: 'blue'}),\n      Plot.ruleY([0])\n    ]\n  })\n}\nrender(window.xyzTable.then(run))",1],[125,5,"code",1],[125,6,"02934f4b-1ff8-41f3-acfc-58276794954a",1],[126,0,"Now let's render the chromaticity according to our nonsensical color matching functions:\n",1],[126,1,[1,"{}"],1],[126,2,124,1],[126,3,1,1],[126,4,"Now let's render the chromaticity according to our nonsensical color matching functions:",1],[126,5,"paragraph",1],[126,6,"00b07343-6947-48d4-9a25-f4c0b755d270",1],[127,0,"```js run height=500\nconst canvas = document.createElement('canvas');\ncanvas.width = 500;\ncanvas.height = 500;\ncanvas.style.border = '1px solid #f0f0f0'\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\nctx.fillStyle = 'white';\nctx.fillRect(0, 0, 500, 500)\n\nfor(let i=38; i<780; i++) {\n  /*const X = Math.random() * 900 + 360;\n  const Y = Math.random() * 200 + 100;\n  const Z = Math.random() * 550 + 50;*/\n\n  const X = Math.sin(i / 20 + 100) * .4 + .9; // Math.random() * 900 + 360,\n  const Y = Math.sin(i / 40 + 140) * .7 + .72; // Math.random() * 200 + 100,\n  const Z = Math.sin(i / 80 + 70) * .2 + 1; // Math.random() * 550 + 50\n\n  const x = X / (X + Y + Z);\n  const y = Y / (X + Y + Z);\n\n  ctx.strokeStyle = 'black';\n  ctx.fillStyle = 'red'; \t\n  ctx.strokeRect(x * 500, (1 - y) * 500, 5, 5)\n}\n\nrender(canvas)\n```\n",1],[127,1,[1,"{\"lang\" \"js\", \"run\" true, \"height\" 500}"],1],[127,2,125,1],[127,3,1,1],[127,4,"const canvas = document.createElement('canvas');\ncanvas.width = 500;\ncanvas.height = 500;\ncanvas.style.border = '1px solid #f0f0f0'\nconst ctx = canvas.getContext(\"2d\", { colorSpace: \"display-p3\" });\n\nctx.fillStyle = 'white';\nctx.fillRect(0, 0, 500, 500)\n\nfor(let i=38; i<780; i++) {\n  /*const X = Math.random() * 900 + 360;\n  const Y = Math.random() * 200 + 100;\n  const Z = Math.random() * 550 + 50;*/\n\n  const X = Math.sin(i / 20 + 100) * .4 + .9; // Math.random() * 900 + 360,\n  const Y = Math.sin(i / 40 + 140) * .7 + .72; // Math.random() * 200 + 100,\n  const Z = Math.sin(i / 80 + 70) * .2 + 1; // Math.random() * 550 + 50\n\n  const x = X / (X + Y + Z);\n  const y = Y / (X + Y + Z);\n\n  ctx.strokeStyle = 'black';\n  ctx.fillStyle = 'red'; \t\n  ctx.strokeRect(x * 500, (1 - y) * 500, 5, 5)\n}\n\nrender(canvas)",1],[127,5,"code",1],[127,6,"acaa78bc-5610-4fd8-8ad4-5d784aaac1bf",1],[128,0,"The shape is very different! So that's it: the shape is due to the XYZ color matching functions, which were derived from experiments that studied how our eyes perceive red, green, and blue light. That's why the chromaticity diagram represents something meaningful: it's how our eyes perceive color.\n",1],[128,1,[1,"{}"],1],[128,2,126,1],[128,3,1,1],[128,4,"The shape is very different! So that's it: the shape is due to the XYZ color matching functions, which were derived from experiments that studied how our eyes perceive red, green, and blue light. That's why the chromaticity diagram represents something meaningful: it's how our eyes perceive color.",1],[128,5,"paragraph",1],[128,6,"73621e99-8209-416c-a018-9ba22bbd340e",1],[129,0,"***\n",1],[129,1,[1,"{}"],1],[129,2,127,1],[129,3,1,1],[129,4,"",1],[129,5,"thematicBreak",1],[129,6,"b34b1228-084b-4b09-9b27-cedeca6dc3a5",1],[130,0,"Resources:\n",1],[130,1,[1,"{}"],1],[130,2,128,1],[130,3,1,1],[130,4,"Resources:",1],[130,5,"paragraph",1],[130,6,"d01f9675-2d0f-4d6d-a1d9-ecedd4cce329",1],[131,0,"* [The CIE RGB color space](https://en.wikipedia.org/wiki/CIE_1931_color_space#CIE_RGB_color_space)\n* [A Beginner’s Guide to (CIE) Colorimetry](https://medium.com/hipster-color-science/a-beginners-guide-to-colorimetry-401f1830b65a)\n* [CIE Chromaticity and Perception](https://clarkvision.com/articles/color-cie-chromaticity-and-perception/)\n",1],[131,1,[1,"{}"],1],[131,2,129,1],[131,3,1,1],[131,4,"The CIE RGB color spaceA Beginner’s Guide to (CIE) ColorimetryCIE Chromaticity and Perception",1],[131,5,"list",1],[131,6,"748d5587-84d7-4e1a-a2bc-62377b5cc3b9",1]],"aevt":[9,16,23,30,37,44,51,58,65,72,79,86,93,100,107,114,121,128,135,142,149,156,163,170,177,184,191,198,205,212,219,226,233,240,247,254,261,268,275,282,289,296,303,310,317,324,331,338,345,352,359,366,373,380,387,394,401,408,415,422,429,436,443,450,457,464,471,478,485,492,499,506,513,520,527,534,541,548,555,562,569,576,583,590,597,604,611,618,625,632,639,646,653,660,667,674,681,688,695,702,709,716,723,730,737,744,751,758,765,772,779,786,793,800,807,814,821,828,835,842,849,856,863,870,877,884,891,898,905,912,10,17,24,31,38,45,52,59,66,73,80,87,94,101,108,115,122,129,136,143,150,157,164,171,178,185,192,199,206,213,220,227,234,241,248,255,262,269,276,283,290,297,304,311,318,325,332,339,346,353,360,367,374,381,388,395,402,409,416,423,430,437,444,451,458,465,472,479,486,493,500,507,514,521,528,535,542,549,556,563,570,577,584,591,598,605,612,619,626,633,640,647,654,661,668,675,682,689,696,703,710,717,724,731,738,745,752,759,766,773,780,787,794,801,808,815,822,829,836,843,850,857,864,871,878,885,892,899,906,913,11,18,25,32,39,46,53,60,67,74,81,88,95,102,109,116,123,130,137,144,151,158,165,172,179,186,193,200,207,214,221,228,235,242,249,256,263,270,277,284,291,298,305,312,319,326,333,340,347,354,361,368,375,382,389,396,403,410,417,424,431,438,445,452,459,466,473,480,487,494,501,508,515,522,529,536,543,550,557,564,571,578,585,592,599,606,613,620,627,634,641,648,655,662,669,676,683,690,697,704,711,718,725,732,739,746,753,760,767,774,781,788,795,802,809,816,823,830,837,844,851,858,865,872,879,886,893,900,907,914,12,19,26,33,40,47,54,61,68,75,82,89,96,103,110,117,124,131,138,145,152,159,166,173,180,187,194,201,208,215,222,229,236,243,250,257,264,271,278,285,292,299,306,313,320,327,334,341,348,355,362,369,376,383,390,397,404,411,418,425,432,439,446,453,460,467,474,481,488,495,502,509,516,523,530,537,544,551,558,565,572,579,586,593,600,607,614,621,628,635,642,649,656,663,670,677,684,691,698,705,712,719,726,733,740,747,754,761,768,775,782,789,796,803,810,817,824,831,838,845,852,859,866,873,880,887,894,901,908,915,13,20,27,34,41,48,55,62,69,76,83,90,97,104,111,118,125,132,139,146,153,160,167,174,181,188,195,202,209,216,223,230,237,244,251,258,265,272,279,286,293,300,307,314,321,328,335,342,349,356,363,370,377,384,391,398,405,412,419,426,433,440,447,454,461,468,475,482,489,496,503,510,517,524,531,538,545,552,559,566,573,580,587,594,601,608,615,622,629,636,643,650,657,664,671,678,685,692,699,706,713,720,727,734,741,748,755,762,769,776,783,790,797,804,811,818,825,832,839,846,853,860,867,874,881,888,895,902,909,916,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119,126,133,140,147,154,161,168,175,182,189,196,203,210,217,224,231,238,245,252,259,266,273,280,287,294,301,308,315,322,329,336,343,350,357,364,371,378,385,392,399,406,413,420,427,434,441,448,455,462,469,476,483,490,497,504,511,518,525,532,539,546,553,560,567,574,581,588,595,602,609,616,623,630,637,644,651,658,665,672,679,686,693,700,707,714,721,728,735,742,749,756,763,770,777,784,791,798,805,812,819,826,833,840,847,854,861,868,875,882,889,896,903,910,917,15,22,29,36,43,50,57,64,71,78,85,92,99,106,113,120,127,134,141,148,155,162,169,176,183,190,197,204,211,218,225,232,239,246,253,260,267,274,281,288,295,302,309,316,323,330,337,344,351,358,365,372,379,386,393,400,407,414,421,428,435,442,449,456,463,470,477,484,491,498,505,512,519,526,533,540,547,554,561,568,575,582,589,596,603,610,617,624,631,638,645,652,659,666,673,680,687,694,701,708,715,722,729,736,743,750,757,764,771,778,785,792,799,806,813,820,827,834,841,848,855,862,869,876,883,890,897,904,911,918,0,1,2,3,4,5,6,7,8],"avet":[12,19,26,33,40,47,54,61,68,75,82,89,96,103,110,117,124,131,138,145,152,159,166,173,180,187,194,201,208,215,222,229,236,243,250,257,264,271,278,285,292,299,306,313,320,327,334,341,348,355,362,369,376,383,390,397,404,411,418,425,432,439,446,453,460,467,474,481,488,495,502,509,516,523,530,537,544,551,558,565,572,579,586,593,600,607,614,621,628,635,642,649,656,663,670,677,684,691,698,705,712,719,726,733,740,747,754,761,768,775,782,789,796,803,810,817,824,831,838,845,852,859,866,873,880,887,894,901,908,915]}